{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/oliver.ree/Developer/Personal/Daisy/daisy-platform/src/components/nodes/TextInputNode.tsx"],"sourcesContent":["'use client';\n\nimport React, { memo, useState } from 'react';\nimport { Handle, Position } from 'reactflow';\nimport { FileText, Edit3, Type } from 'lucide-react';\n\ninterface TextInputNodeData {\n  label: string;\n  value: string;\n  placeholder?: string;\n  onDataChange?: (data: any) => void;\n}\n\ninterface TextInputNodeProps {\n  data: TextInputNodeData;\n  selected?: boolean;\n}\n\nfunction TextInputNode({ data, selected }: TextInputNodeProps) {\n  const [isEditing, setIsEditing] = useState(false);\n  const [localValue, setLocalValue] = useState(data.value || '');\n\n  const handleDoubleClick = () => {\n    setIsEditing(true);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsEditing(false);\n    \n    // Update the node data\n    if (data.onDataChange) {\n      data.onDataChange({ value: localValue });\n    }\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === 'Escape') {\n      setIsEditing(false);\n      setLocalValue(data.value || '');\n    }\n  };\n\n  return (\n    <div className={`bg-gray-800 border-2 rounded-lg shadow-lg min-w-48 ${\n      selected ? 'border-blue-500' : 'border-blue-600/30'\n    }`}>\n      {/* Header */}\n      <div className=\"bg-blue-600/20 px-3 py-2 border-b border-blue-600/30 rounded-t-lg\">\n        <div className=\"flex items-center space-x-2\">\n          <FileText className=\"w-4 h-4 text-blue-400\" />\n          <span className=\"text-sm font-medium text-blue-100\">{data.label}</span>\n          <Edit3 className=\"w-3 h-3 text-blue-300 ml-auto\" />\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"p-3\">\n        {isEditing ? (\n          <form onSubmit={handleSubmit}>\n            <textarea\n              value={localValue}\n              onChange={(e) => setLocalValue(e.target.value)}\n              onKeyDown={handleKeyDown}\n              onBlur={() => {\n                setIsEditing(false);\n                // Update the node data when losing focus\n                if (data.onDataChange) {\n                  data.onDataChange({ value: localValue });\n                }\n              }}\n              placeholder={data.placeholder || 'Enter text...'}\n              className=\"w-full h-20 px-2 py-1 bg-gray-700 border border-gray-600 rounded text-sm text-white placeholder-gray-400 resize-none focus:outline-none focus:border-blue-500\"\n              autoFocus\n            />\n          </form>\n        ) : (\n          <div\n            onDoubleClick={handleDoubleClick}\n            className=\"min-h-20 p-2 bg-gray-700 border border-gray-600 rounded text-sm text-white cursor-text hover:border-gray-500 transition-colors\"\n          >\n            {localValue || (\n              <span className=\"text-gray-400 italic\">\n                {data.placeholder || 'Double-click to edit...'}\n              </span>\n            )}\n          </div>\n        )}\n\n        {/* Node Info */}\n        <div className=\"mt-2 flex items-center justify-between text-xs text-gray-400\">\n          <div className=\"flex items-center space-x-1\">\n            <Type className=\"w-3 h-3\" />\n            <span>Text</span>\n          </div>\n          <span>{localValue.length} chars</span>\n        </div>\n      </div>\n\n      {/* Output Handle */}\n      <Handle\n        type=\"source\"\n        position={Position.Right}\n        style={{\n          background: '#3B82F6',\n          border: '2px solid #1E40AF',\n          width: 12,\n          height: 12,\n        }}\n      />\n    </div>\n  );\n}\n\nexport default memo(TextInputNode);\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AAAA;AAAA;;;AAJA;;;;AAkBA,SAAS,cAAc,KAAsC;QAAtC,EAAE,IAAI,EAAE,QAAQ,EAAsB,GAAtC;;IACrB,MAAM,CAAC,WAAW,aAAa,GAAG,IAAA,yKAAQ,EAAC;IAC3C,MAAM,CAAC,YAAY,cAAc,GAAG,IAAA,yKAAQ,EAAC,KAAK,KAAK,IAAI;IAE3D,MAAM,oBAAoB;QACxB,aAAa;IACf;IAEA,MAAM,eAAe,CAAC;QACpB,EAAE,cAAc;QAChB,aAAa;QAEb,uBAAuB;QACvB,IAAI,KAAK,YAAY,EAAE;YACrB,KAAK,YAAY,CAAC;gBAAE,OAAO;YAAW;QACxC;IACF;IAEA,MAAM,gBAAgB,CAAC;QACrB,IAAI,EAAE,GAAG,KAAK,UAAU;YACtB,aAAa;YACb,cAAc,KAAK,KAAK,IAAI;QAC9B;IACF;IAEA,qBACE,6LAAC;QAAI,WAAW,AAAC,sDAEhB,OADC,WAAW,oBAAoB;;0BAG/B,6LAAC;gBAAI,WAAU;0BACb,cAAA,6LAAC;oBAAI,WAAU;;sCACb,6LAAC,6NAAQ;4BAAC,WAAU;;;;;;sCACpB,6LAAC;4BAAK,WAAU;sCAAqC,KAAK,KAAK;;;;;;sCAC/D,6LAAC,sNAAK;4BAAC,WAAU;;;;;;;;;;;;;;;;;0BAKrB,6LAAC;gBAAI,WAAU;;oBACZ,0BACC,6LAAC;wBAAK,UAAU;kCACd,cAAA,6LAAC;4BACC,OAAO;4BACP,UAAU,CAAC,IAAM,cAAc,EAAE,MAAM,CAAC,KAAK;4BAC7C,WAAW;4BACX,QAAQ;gCACN,aAAa;gCACb,yCAAyC;gCACzC,IAAI,KAAK,YAAY,EAAE;oCACrB,KAAK,YAAY,CAAC;wCAAE,OAAO;oCAAW;gCACxC;4BACF;4BACA,aAAa,KAAK,WAAW,IAAI;4BACjC,WAAU;4BACV,SAAS;;;;;;;;;;6CAIb,6LAAC;wBACC,eAAe;wBACf,WAAU;kCAET,4BACC,6LAAC;4BAAK,WAAU;sCACb,KAAK,WAAW,IAAI;;;;;;;;;;;kCAO7B,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAI,WAAU;;kDACb,6LAAC,6MAAI;wCAAC,WAAU;;;;;;kDAChB,6LAAC;kDAAK;;;;;;;;;;;;0CAER,6LAAC;;oCAAM,WAAW,MAAM;oCAAC;;;;;;;;;;;;;;;;;;;0BAK7B,6LAAC,yKAAM;gBACL,MAAK;gBACL,UAAU,2KAAQ,CAAC,KAAK;gBACxB,OAAO;oBACL,YAAY;oBACZ,QAAQ;oBACR,OAAO;oBACP,QAAQ;gBACV;;;;;;;;;;;;AAIR;GA9FS;KAAA;2DAgGM,IAAA,qKAAI,EAAC","debugId":null}},
    {"offset": {"line": 213, "column": 0}, "map": {"version":3,"sources":["file:///Users/oliver.ree/Developer/Personal/Daisy/daisy-platform/src/components/nodes/ImageInputNode.tsx"],"sourcesContent":["'use client';\n\nimport React, { memo, useState, useRef } from 'react';\nimport { Handle, Position } from 'reactflow';\nimport { Image as ImageIcon, Upload, Link, X } from 'lucide-react';\n\ninterface ImageInputNodeData {\n  label: string;\n  imageUrl: string;\n  description?: string;\n  onDataChange?: (data: any) => void;\n}\n\ninterface ImageInputNodeProps {\n  data: ImageInputNodeData;\n  selected?: boolean;\n}\n\nfunction ImageInputNode({ data, selected }: ImageInputNodeProps) {\n  const [imageUrl, setImageUrl] = useState(data.imageUrl || '');\n  const [showUrlInput, setShowUrlInput] = useState(false);\n  const [dragOver, setDragOver] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const newImageUrl = e.target?.result as string;\n        setImageUrl(newImageUrl);\n        if (data.onDataChange) {\n          data.onDataChange({ imageUrl: newImageUrl });\n        }\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setDragOver(false);\n    const file = e.dataTransfer.files[0];\n    if (file && file.type.startsWith('image/')) {\n      const reader = new FileReader();\n      reader.onload = (event) => {\n        const newImageUrl = event.target?.result as string;\n        setImageUrl(newImageUrl);\n        if (data.onDataChange) {\n          data.onDataChange({ imageUrl: newImageUrl });\n        }\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    setDragOver(true);\n  };\n\n  const handleDragLeave = () => {\n    setDragOver(false);\n  };\n\n  const clearImage = () => {\n    setImageUrl('');\n    if (data.onDataChange) {\n      data.onDataChange({ imageUrl: '' });\n    }\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  return (\n    <div className={`bg-gray-800 border-2 rounded-lg shadow-lg min-w-48 ${\n      selected ? 'border-green-500' : 'border-green-600/30'\n    }`}>\n      {/* Header */}\n      <div className=\"bg-green-600/20 px-3 py-2 border-b border-green-600/30 rounded-t-lg\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <ImageIcon className=\"w-4 h-4 text-green-400\" />\n            <span className=\"text-sm font-medium text-green-100\">{data.label}</span>\n          </div>\n          {imageUrl && (\n            <button\n              onClick={clearImage}\n              className=\"text-green-300 hover:text-white transition-colors\"\n            >\n              <X className=\"w-3 h-3\" />\n            </button>\n          )}\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"p-3\">\n        {imageUrl ? (\n          <div className=\"space-y-2\">\n            <div className=\"relative group\">\n              <img\n                src={imageUrl}\n                alt=\"Uploaded\"\n                className=\"w-full h-32 object-cover rounded border border-gray-600\"\n              />\n              <div className=\"absolute inset-0 bg-black/50 opacity-0 group-hover:opacity-100 transition-opacity rounded flex items-center justify-center\">\n                <button\n                  onClick={() => fileInputRef.current?.click()}\n                  className=\"text-white text-xs bg-green-600 hover:bg-green-700 px-2 py-1 rounded\"\n                >\n                  Change\n                </button>\n              </div>\n            </div>\n            {data.description && (\n              <p className=\"text-xs text-gray-400\">{data.description}</p>\n            )}\n          </div>\n        ) : (\n          <div\n            onDrop={handleDrop}\n            onDragOver={handleDragOver}\n            onDragLeave={handleDragLeave}\n            className={`border-2 border-dashed rounded-lg p-4 text-center transition-colors ${\n              dragOver \n                ? 'border-green-500 bg-green-600/10' \n                : 'border-gray-600 hover:border-gray-500'\n            }`}\n          >\n            <ImageIcon className=\"w-8 h-8 text-gray-400 mx-auto mb-2\" />\n            <p className=\"text-xs text-gray-400 mb-2\">\n              Drag image here or\n            </p>\n            <div className=\"space-y-1\">\n              <button\n                onClick={() => fileInputRef.current?.click()}\n                className=\"text-xs bg-green-600 hover:bg-green-700 text-white px-2 py-1 rounded flex items-center space-x-1 mx-auto\"\n              >\n                <Upload className=\"w-3 h-3\" />\n                <span>Upload</span>\n              </button>\n              <button\n                onClick={() => setShowUrlInput(!showUrlInput)}\n                className=\"text-xs bg-gray-600 hover:bg-gray-700 text-white px-2 py-1 rounded flex items-center space-x-1 mx-auto\"\n              >\n                <Link className=\"w-3 h-3\" />\n                <span>URL</span>\n              </button>\n            </div>\n          </div>\n        )}\n\n        {showUrlInput && (\n          <div className=\"mt-2\">\n            <input\n              type=\"url\"\n              placeholder=\"Paste image URL...\"\n              value={imageUrl}\n              onChange={(e) => {\n                const newImageUrl = e.target.value;\n                setImageUrl(newImageUrl);\n                if (data.onDataChange) {\n                  data.onDataChange({ imageUrl: newImageUrl });\n                }\n              }}\n              className=\"w-full px-2 py-1 bg-gray-700 border border-gray-600 rounded text-xs text-white placeholder-gray-400 focus:outline-none focus:border-green-500\"\n            />\n          </div>\n        )}\n\n        {/* Node Info */}\n        <div className=\"mt-2 flex items-center justify-between text-xs text-gray-400\">\n          <div className=\"flex items-center space-x-1\">\n            <ImageIcon className=\"w-3 h-3\" />\n            <span>Image</span>\n          </div>\n          {imageUrl && <span className=\"text-green-400\">Ready</span>}\n        </div>\n      </div>\n\n      {/* Hidden file input */}\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        accept=\"image/*\"\n        onChange={handleFileUpload}\n        className=\"hidden\"\n      />\n\n      {/* Output Handle */}\n      <Handle\n        type=\"source\"\n        position={Position.Right}\n        style={{\n          background: '#10B981',\n          border: '2px solid #047857',\n          width: 12,\n          height: 12,\n        }}\n      />\n    </div>\n  );\n}\n\nexport default memo(ImageInputNode);\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 610, "column": 0}, "map": {"version":3,"sources":["file:///Users/oliver.ree/Developer/Personal/Daisy/daisy-platform/src/components/nodes/AIPromptNode.tsx"],"sourcesContent":["'use client';\n\nimport React, { memo, useState, useEffect } from 'react';\nimport { Handle, Position } from 'reactflow';\nimport { Brain, Settings, Play, Loader2, Zap, Image, FileText, Sparkles } from 'lucide-react';\n\ninterface AIPromptNodeData {\n  label: string;\n  prompt: string;\n  model: string;\n  temperature: number;\n  maxTokens: number;\n  response?: string;\n  isProcessing?: boolean;\n  nodeId?: string;\n  executeWorkflow?: (nodeId: string) => Promise<any>;\n  onDataChange?: (data: any) => void;\n  activateEdgeFlow?: () => void;\n}\n\ninterface AIPromptNodeProps {\n  data: AIPromptNodeData;\n  selected?: boolean;\n}\n\nfunction AIPromptNode({ data, selected }: AIPromptNodeProps) {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [localPrompt, setLocalPrompt] = useState(data.prompt || '');\n  const [model, setModel] = useState(data.model || 'gpt-4o');\n  const [temperature, setTemperature] = useState(data.temperature || 0.7);\n  const [maxTokens, setMaxTokens] = useState(data.maxTokens || 1000);\n  const [isProcessing, setIsProcessing] = useState(data.isProcessing || false);\n  const [response, setResponse] = useState(data.response || '');\n  const [connectedInputs, setConnectedInputs] = useState<any[]>([]);\n\n  // Get connected inputs for visual preview\n  useEffect(() => {\n    const getConnectedInputs = async () => {\n      if (data.executeWorkflow && data.nodeId) {\n        try {\n          const workflowContext = await data.executeWorkflow(data.nodeId);\n          setConnectedInputs(workflowContext.connectedInputs || []);\n        } catch (error) {\n          console.error('Error getting connected inputs:', error);\n        }\n      }\n    };\n\n    getConnectedInputs();\n  }, [data.executeWorkflow, data.nodeId]);\n\n  const handleRun = async () => {\n    if (!localPrompt.trim()) return;\n    \n    setIsProcessing(true);\n    setResponse('');\n    \n    // Activate edge flow animation when starting processing\n    if (data.activateEdgeFlow) {\n      data.activateEdgeFlow();\n    }\n    \n    try {\n      const apiKey = localStorage.getItem('openai_api_key');\n      \n      if (!apiKey) {\n        setResponse('Error: OpenAI API key not configured. Please go to Settings to add your API key.');\n        setIsProcessing(false);\n        return;\n      }\n\n      // Get connected input data\n      let enhancedPrompt = localPrompt;\n      let messages = [];\n      let currentModel = model;\n      \n      if (data.executeWorkflow && data.nodeId) {\n        const workflowContext = await data.executeWorkflow(data.nodeId);\n        \n        if (workflowContext.textContext || workflowContext.imageContext) {\n          // Auto-switch to vision model if image is provided\n          if (workflowContext.imageContext && !['gpt-4o', 'gpt-4-vision-preview'].includes(model)) {\n            currentModel = 'gpt-4o'; // Auto-switch to vision model\n            setModel('gpt-4o'); // Update UI\n            console.log('Auto-switched to vision model for image processing');\n          }\n          \n          // If we have an image, use vision-capable models\n          if (workflowContext.imageContext && (currentModel === 'gpt-4o' || currentModel === 'gpt-4-vision-preview')) {\n            console.log('Sending image to vision model:', currentModel);\n            console.log('Image URL:', workflowContext.imageContext.substring(0, 50) + '...');\n            \n            const content = [];\n            \n            // Add text content\n            const textContent = workflowContext.textContext ? \n              `Context: ${workflowContext.textContext}\\n\\nTask: ${localPrompt}` : \n              localPrompt;\n            \n            content.push({\n              type: 'text',\n              text: textContent\n            });\n            \n            // Add image content\n            content.push({\n              type: 'image_url',\n              image_url: {\n                url: workflowContext.imageContext,\n                detail: 'high'\n              }\n            });\n            \n            messages = [\n              {\n                role: 'user',\n                content: content\n              }\n            ];\n          } else {\n            // Text-only context (or image with non-vision model)\n            if (workflowContext.imageContext && !['gpt-4o', 'gpt-4-vision-preview'].includes(model)) {\n              // If we have an image but model doesn't support vision, inform the user\n              enhancedPrompt = workflowContext.textContext ? \n                `Context from connected nodes:\\n${workflowContext.textContext}\\nNote: An image was provided but ${model} doesn't support vision. Please switch to GPT-4o or GPT-4 Vision Preview to analyze images.\\n\\nTask: ${localPrompt}` : \n                `Note: An image was provided but ${model} doesn't support vision. Please switch to GPT-4o or GPT-4 Vision Preview to analyze images.\\n\\nTask: ${localPrompt}`;\n            } else {\n              enhancedPrompt = workflowContext.textContext ? \n                `Context from connected nodes:\\n${workflowContext.textContext}\\n\\nTask: ${localPrompt}` : \n                localPrompt;\n            }\n          }\n        }\n      }\n\n      const requestBody = messages.length > 0 ? {\n        messages: messages,\n        model: currentModel || model,\n        temperature: temperature,\n        maxTokens: maxTokens,\n      } : {\n        prompt: enhancedPrompt,\n        model: currentModel || model,\n        temperature: temperature,\n        maxTokens: maxTokens,\n      };\n\n      const response = await fetch('/api/openai', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${apiKey}`,\n        },\n        body: JSON.stringify(requestBody),\n      });\n\n      const responseData = await response.json();\n\n      if (responseData.success) {\n        setResponse(responseData.response);\n        // Update node data with the response\n        if (data.onDataChange) {\n          data.onDataChange({ response: responseData.response });\n        }\n      } else {\n        // Handle different types of errors\n        if (responseData.type === 'safety_rejection') {\n          const suggestionsList = responseData.suggestions \n            ? '\\n\\nSuggestions:\\n' + responseData.suggestions.map((s: string, i: number) => `${i + 1}. ${s}`).join('\\n')\n            : '';\n          \n          setResponse(`🚫 Safety System Rejection\\n\\n${responseData.message}${suggestionsList}\\n\\n💡 Try:\\n• Being more specific about what you want\\n• Using neutral, constructive language\\n• Avoiding sensitive or controversial topics`);\n        } else if (response.status === 400) {\n          setResponse(`⚠️ Request Error\\n\\n${responseData.error}\\n\\n💡 This might be due to:\\n• Invalid prompt format\\n• Unsupported model for your request\\n• Missing required parameters`);\n        } else if (response.status === 401) {\n          setResponse(`🔑 Authentication Error\\n\\n${responseData.error}\\n\\n💡 Please check your OpenAI API key in Settings.`);\n        } else if (response.status === 402) {\n          setResponse(`💳 Quota Exceeded\\n\\n${responseData.error}\\n\\n💡 Please check your OpenAI billing and usage limits.`);\n        } else {\n          setResponse(`❌ Error: ${responseData.error || 'Unknown error occurred'}`);\n        }\n      }\n    } catch (error) {\n      console.error('API call failed:', error);\n      setResponse('🔌 Connection Error\\n\\nFailed to connect to OpenAI API.\\n\\n💡 Please check:\\n• Your internet connection\\n• Your API key is valid\\n• OpenAI services are operational');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  return (\n    <div className={`bg-gray-800 border-2 rounded-lg shadow-lg min-w-64 ${\n      selected ? 'border-purple-500' : 'border-purple-600/30'\n    }`}>\n      {/* Header */}\n      <div className=\"bg-purple-600/20 px-3 py-2 border-b border-purple-600/30 rounded-t-lg\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <Brain className=\"w-4 h-4 text-purple-400\" />\n            <span className=\"text-sm font-medium text-purple-100\">{data.label}</span>\n          </div>\n          <div className=\"flex items-center space-x-1\">\n            <button\n              onClick={() => setIsExpanded(!isExpanded)}\n              className=\"text-purple-300 hover:text-white transition-colors\"\n            >\n              <Settings className=\"w-3 h-3\" />\n            </button>\n            <button\n              onClick={handleRun}\n              disabled={isProcessing || !localPrompt.trim()}\n              className=\"text-purple-300 hover:text-white transition-colors disabled:text-gray-500\"\n            >\n              {isProcessing ? (\n                <Loader2 className=\"w-3 h-3 animate-spin\" />\n              ) : (\n                <Play className=\"w-3 h-3\" />\n              )}\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"p-3 space-y-3\">\n        {/* Connected Inputs Visual Preview */}\n        {connectedInputs.length > 0 && (\n          <div className=\"bg-gray-700/50 border border-gray-600/50 rounded p-3 space-y-2\">\n            <div className=\"flex items-center space-x-2 text-xs text-gray-300 mb-2\">\n              <span>🔗</span>\n              <span>Connected Inputs ({connectedInputs.length})</span>\n            </div>\n            \n            <div className=\"flex flex-wrap gap-2\">\n              {connectedInputs.map((input, index) => (\n                <div key={index} className=\"flex items-center space-x-2\">\n                  {input.type === 'imageInput' && input.data.imageUrl && (\n                    <div className=\"flex items-center space-x-2 bg-gray-600/50 rounded p-2 max-w-48\">\n                      <div className=\"relative\">\n                        <img \n                          src={input.data.imageUrl} \n                          alt=\"Connected image\" \n                          className=\"w-10 h-10 object-cover rounded border border-gray-500\"\n                        />\n                        <div className=\"absolute -top-1 -right-1 w-4 h-4 bg-blue-500 rounded-full flex items-center justify-center\">\n                          <Image className=\"w-2 h-2 text-white\" />\n                        </div>\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"text-xs text-blue-300 font-medium truncate\">\n                          {input.data.fileName || input.data.label || 'Image'}\n                        </div>\n                        <div className=\"text-xs text-gray-400\">Image Input</div>\n                      </div>\n                    </div>\n                  )}\n                  \n                  {input.type === 'textInput' && input.data.value && (\n                    <div className=\"flex items-center space-x-2 bg-gray-600/50 rounded p-2 max-w-48\">\n                      <div className=\"relative\">\n                        <div className=\"w-10 h-10 bg-green-600/20 border border-green-500/50 rounded flex items-center justify-center\">\n                          <FileText className=\"w-4 h-4 text-green-400\" />\n                        </div>\n                        <div className=\"absolute -top-1 -right-1 w-4 h-4 bg-green-500 rounded-full flex items-center justify-center\">\n                          <FileText className=\"w-2 h-2 text-white\" />\n                        </div>\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"text-xs text-green-300 font-medium truncate\">\n                          {input.data.fileName || input.data.label || 'Text'}\n                        </div>\n                        <div className=\"text-xs text-gray-400 truncate\">\n                          {input.data.value.substring(0, 30)}...\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                  \n                  {input.type === 'imageGeneration' && input.data.imageUrl && (\n                    <div className=\"flex items-center space-x-2 bg-gray-600/50 rounded p-2 max-w-48\">\n                      <div className=\"relative\">\n                        <img \n                          src={input.data.imageUrl} \n                          alt=\"Generated image\" \n                          className=\"w-10 h-10 object-cover rounded border border-gray-500\"\n                        />\n                        <div className=\"absolute -top-1 -right-1 w-4 h-4 bg-purple-500 rounded-full flex items-center justify-center\">\n                          <Sparkles className=\"w-2 h-2 text-white\" />\n                        </div>\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"text-xs text-purple-300 font-medium truncate\">\n                          Generated Image\n                        </div>\n                        <div className=\"text-xs text-gray-400\">DALL-E</div>\n                      </div>\n                    </div>\n                  )}\n                  \n                  {input.type === 'aiPrompt' && input.data.response && (\n                    <div className=\"flex items-center space-x-2 bg-gray-600/50 rounded p-2 max-w-48\">\n                      <div className=\"relative\">\n                        <div className=\"w-10 h-10 bg-purple-600/20 border border-purple-500/50 rounded flex items-center justify-center\">\n                          <Brain className=\"w-4 h-4 text-purple-400\" />\n                        </div>\n                        <div className=\"absolute -top-1 -right-1 w-4 h-4 bg-purple-500 rounded-full flex items-center justify-center\">\n                          <Brain className=\"w-2 h-2 text-white\" />\n                        </div>\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"text-xs text-purple-300 font-medium truncate\">\n                          AI Response\n                        </div>\n                        <div className=\"text-xs text-gray-400 truncate\">\n                          {input.data.response.substring(0, 30)}...\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Prompt Input */}\n        <div>\n          <label className=\"text-xs text-gray-400 mb-1 block\">Prompt:</label>\n          <textarea\n            value={localPrompt}\n            onChange={(e) => setLocalPrompt(e.target.value)}\n            placeholder=\"Enter your AI prompt...\"\n            className=\"w-full h-20 px-2 py-1 bg-gray-700 border border-gray-600 rounded text-sm text-white placeholder-gray-400 resize-none focus:outline-none focus:border-purple-500\"\n          />\n        </div>\n\n        {/* Settings (Expandable) */}\n        {isExpanded && (\n          <div className=\"space-y-2 border-t border-gray-700 pt-3\">\n            <div>\n              <label className=\"text-xs text-gray-400 mb-1 block\">Model:</label>\n              <select\n                value={model}\n                onChange={(e) => setModel(e.target.value)}\n                className=\"w-full px-2 py-1 bg-gray-700 border border-gray-600 rounded text-sm text-white focus:outline-none focus:border-purple-500\"\n              >\n                <option value=\"gpt-4o\">GPT-4o (Vision + Text)</option>\n                <option value=\"gpt-4-vision-preview\">GPT-4 Vision Preview</option>\n                <option value=\"gpt-4-turbo-preview\">GPT-4 Turbo</option>\n                <option value=\"gpt-3.5-turbo\">GPT-3.5 Turbo</option>\n              </select>\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-2\">\n              <div>\n                <label className=\"text-xs text-gray-400 mb-1 block\">\n                  Temperature: {temperature}\n                </label>\n                <input\n                  type=\"range\"\n                  min=\"0\"\n                  max=\"2\"\n                  step=\"0.1\"\n                  value={temperature}\n                  onChange={(e) => setTemperature(Number(e.target.value))}\n                  className=\"w-full h-1 bg-gray-600 rounded-lg appearance-none cursor-pointer slider\"\n                />\n              </div>\n              \n              <div>\n                <label className=\"text-xs text-gray-400 mb-1 block\">Max Tokens:</label>\n                <input\n                  type=\"number\"\n                  min=\"1\"\n                  max=\"4000\"\n                  value={maxTokens}\n                  onChange={(e) => setMaxTokens(Number(e.target.value))}\n                  className=\"w-full px-2 py-1 bg-gray-700 border border-gray-600 rounded text-xs text-white focus:outline-none focus:border-purple-500\"\n                />\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Model Status & Warnings */}\n        {data.executeWorkflow && data.nodeId && (\n          <div className=\"space-y-2\">\n            {connectedInputs.length === 0 && (\n              <div className=\"text-xs bg-gray-900/20 border border-gray-700/30 rounded p-2\">\n                <div className=\"flex items-center space-x-1 text-gray-400\">\n                  <span>🔗</span>\n                  <span>Connect nodes to include their data automatically</span>\n                </div>\n              </div>\n            )}\n            \n            {/* Vision Model Warning */}\n            {connectedInputs.some(input => (input.type === 'imageInput' && input.data.imageUrl) || (input.type === 'imageGeneration' && input.data.imageUrl)) && \n             !['gpt-4o', 'gpt-4-vision-preview'].includes(model) && (\n              <div className=\"text-xs bg-yellow-900/20 border border-yellow-700/30 rounded p-2\">\n                <div className=\"flex items-center space-x-1 text-yellow-300\">\n                  <span>⚠️</span>\n                  <span>Switch to GPT-4o or GPT-4 Vision for image processing</span>\n                </div>\n              </div>\n            )}\n            \n            {/* Success indicator when vision model is selected with images */}\n            {connectedInputs.some(input => (input.type === 'imageInput' && input.data.imageUrl) || (input.type === 'imageGeneration' && input.data.imageUrl)) && \n             ['gpt-4o', 'gpt-4-vision-preview'].includes(model) && (\n              <div className=\"text-xs bg-green-900/20 border border-green-700/30 rounded p-2\">\n                <div className=\"flex items-center space-x-1 text-green-300\">\n                  <span>✅</span>\n                  <span>Vision model ready for image analysis</span>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Response */}\n        {(response || isProcessing) && (\n          <div>\n            <label className=\"text-xs text-gray-400 mb-1 block\">Response:</label>\n            <div className=\"min-h-16 p-2 bg-gray-700 border border-gray-600 rounded text-sm text-white\">\n              {isProcessing ? (\n                <div className=\"flex items-center space-x-2 text-purple-400\">\n                  <Loader2 className=\"w-4 h-4 animate-spin\" />\n                  <span>Generating response...</span>\n                </div>\n              ) : (\n                response\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Node Info */}\n        <div className=\"flex items-center justify-between text-xs text-gray-400 border-t border-gray-700 pt-2\">\n          <div className=\"flex items-center space-x-1\">\n            <Brain className=\"w-3 h-3\" />\n            <span>{model}</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            {response && (\n              <span className=\"flex items-center space-x-1 text-green-400\">\n                <Zap className=\"w-3 h-3\" />\n                <span>Ready</span>\n              </span>\n            )}\n            <span>{localPrompt.length} chars</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Input Handle */}\n      <Handle\n        type=\"target\"\n        position={Position.Left}\n        style={{\n          background: '#8B5CF6',\n          border: '2px solid #6D28D9',\n          width: 12,\n          height: 12,\n        }}\n      />\n\n      {/* Output Handle */}\n      <Handle\n        type=\"source\"\n        position={Position.Right}\n        style={{\n          background: '#8B5CF6',\n          border: '2px solid #6D28D9',\n          width: 12,\n          height: 12,\n        }}\n      />\n    </div>\n  );\n}\n\nexport default memo(AIPromptNode);\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1649, "column": 0}, "map": {"version":3,"sources":["file:///Users/oliver.ree/Developer/Personal/Daisy/daisy-platform/src/components/nodes/TextProcessorNode.tsx"],"sourcesContent":["'use client';\n\nimport React, { memo, useState, useEffect } from 'react';\nimport { Handle, Position } from 'reactflow';\nimport { Settings, RefreshCw, Type, Hash } from 'lucide-react';\n\ninterface TextProcessorNodeData {\n  label: string;\n  operation: string;\n  customOperation?: string;\n  inputText?: string;\n  outputText?: string;\n}\n\ninterface TextProcessorNodeProps {\n  data: TextProcessorNodeData;\n  selected?: boolean;\n}\n\nfunction TextProcessorNode({ data, selected }: TextProcessorNodeProps) {\n  const [operation, setOperation] = useState(data.operation || 'uppercase');\n  const [customOperation, setCustomOperation] = useState(data.customOperation || '');\n  const [inputText, setInputText] = useState(data.inputText || 'Sample input text for processing...');\n  const [outputText, setOutputText] = useState(data.outputText || '');\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const processText = (text: string, op: string) => {\n    switch (op) {\n      case 'uppercase':\n        return text.toUpperCase();\n      case 'lowercase':\n        return text.toLowerCase();\n      case 'title':\n        return text.replace(/\\w\\S*/g, (txt) => \n          txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()\n        );\n      case 'reverse':\n        return text.split('').reverse().join('');\n      case 'wordcount':\n        return `Word count: ${text.trim().split(/\\s+/).length}`;\n      case 'charcount':\n        return `Character count: ${text.length}`;\n      case 'trim':\n        return text.trim();\n      case 'removeSpaces':\n        return text.replace(/\\s+/g, '');\n      case 'addPrefix':\n        return `Processed: ${text}`;\n      case 'addSuffix':\n        return `${text} - Processed`;\n      case 'custom':\n        return customOperation ? `${customOperation}: ${text}` : text;\n      default:\n        return text;\n    }\n  };\n\n  useEffect(() => {\n    if (inputText) {\n      setIsProcessing(true);\n      const timer = setTimeout(() => {\n        setOutputText(processText(inputText, operation));\n        setIsProcessing(false);\n      }, 300);\n      return () => clearTimeout(timer);\n    }\n  }, [inputText, operation, customOperation]);\n\n  const operationOptions = [\n    { value: 'uppercase', label: 'UPPERCASE' },\n    { value: 'lowercase', label: 'lowercase' },\n    { value: 'title', label: 'Title Case' },\n    { value: 'reverse', label: 'Reverse Text' },\n    { value: 'wordcount', label: 'Word Count' },\n    { value: 'charcount', label: 'Character Count' },\n    { value: 'trim', label: 'Trim Whitespace' },\n    { value: 'removeSpaces', label: 'Remove Spaces' },\n    { value: 'addPrefix', label: 'Add Prefix' },\n    { value: 'addSuffix', label: 'Add Suffix' },\n    { value: 'custom', label: 'Custom Operation' },\n  ];\n\n  return (\n    <div className={`bg-gray-800 border-2 rounded-lg shadow-lg min-w-64 ${\n      selected ? 'border-yellow-500' : 'border-yellow-600/30'\n    }`}>\n      {/* Header */}\n      <div className=\"bg-yellow-600/20 px-3 py-2 border-b border-yellow-600/30 rounded-t-lg\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <Settings className=\"w-4 h-4 text-yellow-400\" />\n            <span className=\"text-sm font-medium text-yellow-100\">{data.label}</span>\n          </div>\n          {isProcessing && (\n            <RefreshCw className=\"w-3 h-3 text-yellow-300 animate-spin\" />\n          )}\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"p-3 space-y-3\">\n        {/* Operation Selection */}\n        <div>\n          <label className=\"text-xs text-gray-400 mb-1 block\">Operation:</label>\n          <select\n            value={operation}\n            onChange={(e) => setOperation(e.target.value)}\n            className=\"w-full px-2 py-1 bg-gray-700 border border-gray-600 rounded text-sm text-white focus:outline-none focus:border-yellow-500\"\n          >\n            {operationOptions.map((option) => (\n              <option key={option.value} value={option.value}>\n                {option.label}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        {/* Custom Operation Input */}\n        {operation === 'custom' && (\n          <div>\n            <label className=\"text-xs text-gray-400 mb-1 block\">Custom Operation:</label>\n            <input\n              type=\"text\"\n              value={customOperation}\n              onChange={(e) => setCustomOperation(e.target.value)}\n              placeholder=\"Enter custom operation...\"\n              className=\"w-full px-2 py-1 bg-gray-700 border border-gray-600 rounded text-sm text-white placeholder-gray-400 focus:outline-none focus:border-yellow-500\"\n            />\n          </div>\n        )}\n\n        {/* Input Preview */}\n        <div>\n          <label className=\"text-xs text-gray-400 mb-1 block\">Input:</label>\n          <textarea\n            value={inputText}\n            onChange={(e) => setInputText(e.target.value)}\n            className=\"w-full h-16 px-2 py-1 bg-gray-700 border border-gray-600 rounded text-xs text-white placeholder-gray-400 resize-none focus:outline-none focus:border-yellow-500\"\n            placeholder=\"Input text will appear here...\"\n          />\n        </div>\n\n        {/* Output Preview */}\n        {outputText && (\n          <div>\n            <label className=\"text-xs text-gray-400 mb-1 block\">Output:</label>\n            <div className=\"min-h-16 p-2 bg-gray-700 border border-gray-600 rounded text-xs text-white\">\n              {isProcessing ? (\n                <div className=\"flex items-center space-x-2 text-yellow-400\">\n                  <RefreshCw className=\"w-3 h-3 animate-spin\" />\n                  <span>Processing...</span>\n                </div>\n              ) : (\n                outputText\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Node Info */}\n        <div className=\"flex items-center justify-between text-xs text-gray-400 border-t border-gray-700 pt-2\">\n          <div className=\"flex items-center space-x-1\">\n            <Type className=\"w-3 h-3\" />\n            <span>{operationOptions.find(op => op.value === operation)?.label}</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            {inputText && (\n              <span className=\"flex items-center space-x-1\">\n                <Hash className=\"w-3 h-3\" />\n                <span>{inputText.length} → {outputText.length}</span>\n              </span>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Input Handle */}\n      <Handle\n        type=\"target\"\n        position={Position.Left}\n        style={{\n          background: '#EAB308',\n          border: '2px solid #CA8A04',\n          width: 12,\n          height: 12,\n        }}\n      />\n\n      {/* Output Handle */}\n      <Handle\n        type=\"source\"\n        position={Position.Right}\n        style={{\n          background: '#EAB308',\n          border: '2px solid #CA8A04',\n          width: 12,\n          height: 12,\n        }}\n      />\n    </div>\n  );\n}\n\nexport default memo(TextProcessorNode);\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2074, "column": 0}, "map": {"version":3,"sources":["file:///Users/oliver.ree/Developer/Personal/Daisy/daisy-platform/src/components/nodes/OutputNode.tsx"],"sourcesContent":["'use client';\n\nimport React, { memo, useState, useEffect } from 'react';\nimport { Handle, Position } from 'reactflow';\nimport { Zap, Download, Copy, Eye, FileText, Image as ImageIcon, Code, RefreshCw, Brain, Sparkles } from 'lucide-react';\n\ninterface OutputNodeData {\n  label: string;\n  value: string;\n  format: 'text' | 'json' | 'html' | 'markdown' | 'image';\n  nodeId?: string;\n  executeWorkflow?: (nodeId: string) => Promise<any>;\n  onDataChange?: (data: any) => void;\n  activateEdgeFlow?: () => void;\n}\n\ninterface OutputNodeProps {\n  data: OutputNodeData;\n  selected?: boolean;\n}\n\nfunction OutputNode({ data, selected }: OutputNodeProps) {\n  const [format, setFormat] = useState(data.format || 'text');\n  const [value, setValue] = useState(data.value || '');\n  const [copied, setCopied] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [connectedInputs, setConnectedInputs] = useState<any[]>([]);\n\n  // Get connected inputs for visual preview\n  const getConnectedInputsPreview = async () => {\n    if (data.executeWorkflow && data.nodeId) {\n      try {\n        const workflowContext = await data.executeWorkflow(data.nodeId);\n        setConnectedInputs(workflowContext.connectedInputs || []);\n      } catch (error) {\n        console.error('Error getting connected inputs:', error);\n      }\n    }\n  };\n\n  // Auto-detect format based on content\n  const autoDetectFormat = (content: string) => {\n    if (!content) return 'text';\n    \n    // Check if it's an image URL or data URI\n    if (content.startsWith('data:image') || \n        (content.startsWith('http') && /\\.(jpg|jpeg|png|gif|webp|svg)(\\?|$)/i.test(content))) {\n      return 'image';\n    }\n    \n    // Check if it's JSON\n    try {\n      JSON.parse(content);\n      return 'json';\n    } catch {}\n    \n    // Check if it's HTML\n    if (content.includes('<') && content.includes('>')) {\n      return 'html';\n    }\n    \n    // Check if it's markdown\n    if (content.includes('#') || content.includes('*') || content.includes('[')) {\n      return 'markdown';\n    }\n    \n    return 'text';\n  };\n\n  // Load data from connected inputs\n  const loadConnectedData = async () => {\n    if (!data.executeWorkflow || !data.nodeId) return;\n    \n    setIsLoading(true);\n    \n    // Activate edge flow animation when loading data\n    if (data.activateEdgeFlow) {\n      data.activateEdgeFlow();\n    }\n    \n    try {\n      const workflowContext = await data.executeWorkflow(data.nodeId);\n      setConnectedInputs(workflowContext.connectedInputs || []);\n      \n      let outputContent = '';\n      let detectedFormat = 'text';\n      \n      if (workflowContext.connectedInputs && workflowContext.connectedInputs.length > 0) {\n        const input = workflowContext.connectedInputs[0]; // Take first connected input\n        \n        switch (input.type) {\n          case 'textInput':\n            outputContent = input.data.value || '';\n            detectedFormat = 'text';\n            break;\n          case 'imageInput':\n            outputContent = input.data.imageUrl || '';\n            detectedFormat = 'image';\n            break;\n          case 'aiPrompt':\n            outputContent = input.data.response || '';\n            detectedFormat = autoDetectFormat(outputContent);\n            break;\n          case 'textProcessor':\n            outputContent = input.data.outputText || input.data.inputText || '';\n            detectedFormat = 'text';\n            break;\n          case 'imageGeneration':\n            outputContent = input.data.imageUrl || '';\n            detectedFormat = 'image';\n            break;\n          default:\n            outputContent = JSON.stringify(input.data, null, 2);\n            detectedFormat = 'json';\n        }\n        \n        setValue(outputContent);\n        setFormat(detectedFormat);\n        \n        // Update node data\n        if (data.onDataChange) {\n          data.onDataChange({ \n            value: outputContent, \n            format: detectedFormat \n          });\n        }\n      }\n    } catch (error) {\n      console.error('Failed to load connected data:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Auto-load on mount if there are connections\n  useEffect(() => {\n    if (data.executeWorkflow && data.nodeId) {\n      getConnectedInputsPreview();\n      if (!value) {\n        loadConnectedData();\n      }\n    }\n  }, [data.executeWorkflow, data.nodeId]);\n\n  const handleCopy = async () => {\n    try {\n      await navigator.clipboard.writeText(value);\n      setCopied(true);\n      setTimeout(() => setCopied(false), 2000);\n    } catch (err) {\n      console.error('Failed to copy text: ', err);\n    }\n  };\n\n  const handleDownload = () => {\n    const mimeTypes = {\n      text: 'text/plain',\n      json: 'application/json',\n      html: 'text/html',\n      markdown: 'text/markdown',\n      image: 'image/png',\n    };\n\n    const extensions = {\n      text: 'txt',\n      json: 'json',\n      html: 'html',\n      markdown: 'md',\n      image: 'png',\n    };\n\n    const blob = new Blob([value], { type: mimeTypes[format] });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `output.${extensions[format]}`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  const getFormatIcon = (fmt: string) => {\n    switch (fmt) {\n      case 'json':\n      case 'html':\n        return <Code className=\"w-3 h-3\" />;\n      case 'image':\n        return <ImageIcon className=\"w-3 h-3\" />;\n      default:\n        return <FileText className=\"w-3 h-3\" />;\n    }\n  };\n\n  const formatOptions = [\n    { value: 'text', label: 'Plain Text' },\n    { value: 'json', label: 'JSON' },\n    { value: 'html', label: 'HTML' },\n    { value: 'markdown', label: 'Markdown' },\n    { value: 'image', label: 'Image' },\n  ];\n\n  return (\n    <div className={`bg-gray-800 border-2 rounded-lg shadow-lg min-w-64 ${\n      selected ? 'border-red-500' : 'border-red-600/30'\n    }`}>\n      {/* Header */}\n      <div className=\"bg-red-600/20 px-3 py-2 border-b border-red-600/30 rounded-t-lg\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <Zap className=\"w-4 h-4 text-red-400\" />\n            <span className=\"text-sm font-medium text-red-100\">{data.label}</span>\n          </div>\n          <div className=\"flex items-center space-x-1\">\n            {data.executeWorkflow && data.nodeId && (\n              <button\n                onClick={loadConnectedData}\n                disabled={isLoading}\n                className=\"text-red-300 hover:text-white transition-colors disabled:text-gray-500\"\n                title=\"Load data from connected nodes\"\n              >\n                <RefreshCw className={`w-3 h-3 ${isLoading ? 'animate-spin' : ''}`} />\n              </button>\n            )}\n            {value && (\n              <>\n                <button\n                  onClick={handleCopy}\n                  className=\"text-red-300 hover:text-white transition-colors\"\n                  title=\"Copy to clipboard\"\n                >\n                  <Copy className=\"w-3 h-3\" />\n                </button>\n                <button\n                  onClick={handleDownload}\n                  className=\"text-red-300 hover:text-white transition-colors\"\n                  title=\"Download output\"\n                >\n                  <Download className=\"w-3 h-3\" />\n                </button>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"p-3 space-y-3\">\n        {/* Connected Inputs Visual Preview */}\n        {connectedInputs.length > 0 && (\n          <div className=\"bg-gray-700/50 border border-gray-600/50 rounded p-3 space-y-2\">\n            <div className=\"flex items-center space-x-2 text-xs text-gray-300 mb-2\">\n              <span>🔗</span>\n              <span>Source Data ({connectedInputs.length})</span>\n            </div>\n            \n            <div className=\"flex flex-wrap gap-2\">\n              {connectedInputs.map((input, index) => (\n                <div key={index} className=\"flex items-center space-x-2\">\n                  {input.type === 'imageInput' && input.data.imageUrl && (\n                    <div className=\"flex items-center space-x-2 bg-gray-600/50 rounded p-2 max-w-48\">\n                      <div className=\"relative\">\n                        <img \n                          src={input.data.imageUrl} \n                          alt=\"Source image\" \n                          className=\"w-10 h-10 object-cover rounded border border-gray-500\"\n                        />\n                        <div className=\"absolute -top-1 -right-1 w-4 h-4 bg-blue-500 rounded-full flex items-center justify-center\">\n                          <ImageIcon className=\"w-2 h-2 text-white\" />\n                        </div>\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"text-xs text-blue-300 font-medium truncate\">\n                          {input.data.fileName || input.data.label || 'Image'}\n                        </div>\n                        <div className=\"text-xs text-gray-400\">Image Input</div>\n                      </div>\n                    </div>\n                  )}\n                  \n                  {input.type === 'textInput' && input.data.value && (\n                    <div className=\"flex items-center space-x-2 bg-gray-600/50 rounded p-2 max-w-48\">\n                      <div className=\"relative\">\n                        <div className=\"w-10 h-10 bg-green-600/20 border border-green-500/50 rounded flex items-center justify-center\">\n                          <FileText className=\"w-4 h-4 text-green-400\" />\n                        </div>\n                        <div className=\"absolute -top-1 -right-1 w-4 h-4 bg-green-500 rounded-full flex items-center justify-center\">\n                          <FileText className=\"w-2 h-2 text-white\" />\n                        </div>\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"text-xs text-green-300 font-medium truncate\">\n                          {input.data.fileName || input.data.label || 'Text'}\n                        </div>\n                        <div className=\"text-xs text-gray-400 truncate\">\n                          {input.data.value.substring(0, 30)}...\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                  \n                  {input.type === 'imageGeneration' && input.data.imageUrl && (\n                    <div className=\"flex items-center space-x-2 bg-gray-600/50 rounded p-2 max-w-48\">\n                      <div className=\"relative\">\n                        <img \n                          src={input.data.imageUrl} \n                          alt=\"Generated image\" \n                          className=\"w-10 h-10 object-cover rounded border border-gray-500\"\n                        />\n                        <div className=\"absolute -top-1 -right-1 w-4 h-4 bg-purple-500 rounded-full flex items-center justify-center\">\n                          <Sparkles className=\"w-2 h-2 text-white\" />\n                        </div>\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"text-xs text-purple-300 font-medium truncate\">\n                          Generated Image\n                        </div>\n                        <div className=\"text-xs text-gray-400\">DALL-E Output</div>\n                      </div>\n                    </div>\n                  )}\n                  \n                  {input.type === 'aiPrompt' && input.data.response && (\n                    <div className=\"flex items-center space-x-2 bg-gray-600/50 rounded p-2 max-w-48\">\n                      <div className=\"relative\">\n                        <div className=\"w-10 h-10 bg-purple-600/20 border border-purple-500/50 rounded flex items-center justify-center\">\n                          <Brain className=\"w-4 h-4 text-purple-400\" />\n                        </div>\n                        <div className=\"absolute -top-1 -right-1 w-4 h-4 bg-purple-500 rounded-full flex items-center justify-center\">\n                          <Brain className=\"w-2 h-2 text-white\" />\n                        </div>\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"text-xs text-purple-300 font-medium truncate\">\n                          {input.data.label || 'AI Response'}\n                        </div>\n                        <div className=\"text-xs text-gray-400 truncate\">\n                          {input.data.response.substring(0, 30)}...\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Format Selection */}\n        <div>\n          <label className=\"text-xs text-gray-400 mb-1 block\">Output Format:</label>\n          <select\n            value={format}\n            onChange={(e) => setFormat(e.target.value as any)}\n            className=\"w-full px-2 py-1 bg-gray-700 border border-gray-600 rounded text-sm text-white focus:outline-none focus:border-red-500\"\n          >\n            {formatOptions.map((option) => (\n              <option key={option.value} value={option.value}>\n                {option.label}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        {/* Status Messages */}\n        {data.executeWorkflow && data.nodeId && (\n          <div className=\"space-y-2\">\n            {connectedInputs.length === 0 && (\n              <div className=\"text-xs bg-gray-900/20 border border-gray-700/30 rounded p-2\">\n                <div className=\"flex items-center space-x-1 text-gray-400\">\n                  <span>🔗</span>\n                  <span>Connect a node to display its output here</span>\n                </div>\n              </div>\n            )}\n            \n            {connectedInputs.length > 0 && !value && (\n              <div className=\"text-xs bg-blue-900/20 border border-blue-700/30 rounded p-2\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-1 text-blue-300\">\n                    <span>✨</span>\n                    <span>Ready to display connected data</span>\n                  </div>\n                  <button\n                    onClick={loadConnectedData}\n                    disabled={isLoading}\n                    className=\"text-blue-300 hover:text-white text-xs underline disabled:text-gray-500\"\n                  >\n                    {isLoading ? 'Loading...' : 'Load'}\n                  </button>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Output Display */}\n        <div>\n          <label className=\"text-xs text-gray-400 mb-1 block\">Output:</label>\n          {value ? (\n            <div className=\"space-y-2\">\n              <div className=\"min-h-32 max-h-48 p-2 bg-gray-700 border border-gray-600 rounded text-sm text-white overflow-auto\">\n                {format === 'image' ? (\n                  value.startsWith('data:image') || value.startsWith('http') ? (\n                    <img src={value} alt=\"Output\" className=\"max-w-full h-auto rounded\" />\n                  ) : (\n                    <div className=\"text-gray-400 italic\">Invalid image data</div>\n                  )\n                ) : format === 'json' ? (\n                  <pre className=\"whitespace-pre-wrap text-xs\">{\n                    (() => {\n                      try {\n                        return JSON.stringify(JSON.parse(value), null, 2);\n                      } catch {\n                        return value;\n                      }\n                    })()\n                  }</pre>\n                ) : format === 'html' ? (\n                  <div className=\"space-y-2\">\n                    <div className=\"text-xs text-gray-400\">Rendered:</div>\n                    <div \n                      className=\"border border-gray-600 rounded p-2 bg-white text-black text-xs\"\n                      dangerouslySetInnerHTML={{ __html: value }}\n                    />\n                    <div className=\"text-xs text-gray-400\">Raw HTML:</div>\n                    <pre className=\"text-xs text-gray-300\">{value}</pre>\n                  </div>\n                ) : (\n                  <div className=\"whitespace-pre-wrap\">{value}</div>\n                )}\n              </div>\n\n              {copied && (\n                <div className=\"text-xs text-green-400 text-center\">\n                  ✓ Copied to clipboard\n                </div>\n              )}\n            </div>\n          ) : (\n            <div className=\"min-h-32 p-2 bg-gray-700 border border-gray-600 rounded text-sm text-gray-400 italic flex items-center justify-center\">\n              <div className=\"text-center\">\n                <Eye className=\"w-6 h-6 mx-auto mb-2 text-gray-500\" />\n                {data.executeWorkflow && data.nodeId ? (\n                  <div>\n                    <p>Connect nodes to see output here</p>\n                    <p className=\"text-xs mt-1\">Or click refresh to load connected data</p>\n                  </div>\n                ) : (\n                  <p>Output will appear here when workflow runs</p>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Node Info */}\n        <div className=\"flex items-center justify-between text-xs text-gray-400 border-t border-gray-700 pt-2\">\n          <div className=\"flex items-center space-x-1\">\n            {getFormatIcon(format)}\n            <span>{formatOptions.find(opt => opt.value === format)?.label}</span>\n          </div>\n          {value && (\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-green-400\">Ready</span>\n              <span>{\n                format === 'image' ? 'Image' : \n                `${value.length} chars`\n              }</span>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Input Handle */}\n      <Handle\n        type=\"target\"\n        position={Position.Left}\n        style={{\n          background: '#EF4444',\n          border: '2px solid #DC2626',\n          width: 12,\n          height: 12,\n        }}\n      />\n    </div>\n  );\n}\n\nexport default memo(OutputNode);\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3118, "column": 0}, "map": {"version":3,"sources":["file:///Users/oliver.ree/Developer/Personal/Daisy/daisy-platform/src/components/nodes/ImageGenerationNode.tsx"],"sourcesContent":["'use client';\n\nimport React, { memo, useState } from 'react';\nimport { Handle, Position } from 'reactflow';\nimport { Zap, Settings, Play, Loader2, Image as ImageIcon, Download } from 'lucide-react';\n\ninterface ImageGenerationNodeData {\n  label: string;\n  prompt: string;\n  size: string;\n  quality: string;\n  style: string;\n  imageUrl?: string;\n  revisedPrompt?: string;\n  isGenerating?: boolean;\n  nodeId?: string;\n  executeWorkflow?: (nodeId: string) => Promise<any>;\n  onDataChange?: (data: any) => void;\n  activateEdgeFlow?: () => void;\n}\n\ninterface ImageGenerationNodeProps {\n  data: ImageGenerationNodeData;\n  selected?: boolean;\n}\n\nfunction ImageGenerationNode({ data, selected }: ImageGenerationNodeProps) {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [localPrompt, setLocalPrompt] = useState(data.prompt || '');\n  const [size, setSize] = useState(data.size || '1024x1024');\n  const [quality, setQuality] = useState(data.quality || 'standard');\n  const [style, setStyle] = useState(data.style || 'vivid');\n  const [isGenerating, setIsGenerating] = useState(data.isGenerating || false);\n  const [imageUrl, setImageUrl] = useState(data.imageUrl || '');\n  const [revisedPrompt, setRevisedPrompt] = useState(data.revisedPrompt || '');\n\n  const handleGenerate = async () => {\n    let finalPrompt = localPrompt;\n    \n    // Get connected input data if available\n    if (data.executeWorkflow && data.nodeId) {\n      const workflowContext = await data.executeWorkflow(data.nodeId);\n      \n      if (workflowContext.textContext) {\n        // Use connected text as the prompt\n        finalPrompt = workflowContext.textContext.replace('Text Input: ', '').trim();\n      }\n    }\n    \n    if (!finalPrompt.trim()) {\n      alert('Please provide a prompt for image generation');\n      return;\n    }\n    \n    setIsGenerating(true);\n    setImageUrl('');\n    setRevisedPrompt('');\n    \n    // Activate edge flow animation when starting generation\n    if (data.activateEdgeFlow) {\n      data.activateEdgeFlow();\n    }\n    \n    try {\n      const apiKey = localStorage.getItem('openai_api_key');\n      \n      if (!apiKey) {\n        alert('OpenAI API key not configured. Please go to Settings to add your API key.');\n        setIsGenerating(false);\n        return;\n      }\n\n      const response = await fetch('/api/dalle', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${apiKey}`,\n        },\n        body: JSON.stringify({\n          prompt: finalPrompt,\n          size: size,\n          quality: quality,\n          style: style,\n        }),\n      });\n\n      const responseData = await response.json();\n\n      if (responseData.success) {\n        setImageUrl(responseData.imageUrl);\n        setRevisedPrompt(responseData.revisedPrompt || '');\n        \n        // Update node data\n        if (data.onDataChange) {\n          data.onDataChange({ \n            imageUrl: responseData.imageUrl,\n            revisedPrompt: responseData.revisedPrompt\n          });\n        }\n      } else {\n        alert(`Error: ${responseData.error}`);\n      }\n    } catch (error) {\n      console.error('Image generation failed:', error);\n      alert('Error: Failed to generate image. Please check your connection and API key.');\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  const downloadImage = async () => {\n    if (!imageUrl) return;\n    \n    try {\n      const response = await fetch(imageUrl);\n      const blob = await response.blob();\n      const url = URL.createObjectURL(blob);\n      \n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `generated-image-${Date.now()}.png`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      \n      URL.revokeObjectURL(url);\n    } catch (error) {\n      console.error('Download failed:', error);\n      alert('Failed to download image');\n    }\n  };\n\n  return (\n    <div className={`bg-gray-800 border-2 rounded-lg shadow-lg min-w-80 ${\n      selected ? 'border-yellow-500' : 'border-yellow-600/30'\n    }`}>\n      {/* Header */}\n      <div className=\"bg-yellow-600/20 px-3 py-2 border-b border-yellow-600/30 rounded-t-lg\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <Zap className=\"w-4 h-4 text-yellow-400\" />\n            <span className=\"text-sm font-medium text-yellow-100\">{data.label}</span>\n          </div>\n          <div className=\"flex items-center space-x-1\">\n            <button\n              onClick={() => setIsExpanded(!isExpanded)}\n              className=\"text-yellow-300 hover:text-white transition-colors\"\n            >\n              <Settings className=\"w-3 h-3\" />\n            </button>\n            <button\n              onClick={handleGenerate}\n              disabled={isGenerating}\n              className=\"text-yellow-300 hover:text-white transition-colors disabled:text-gray-500\"\n            >\n              {isGenerating ? (\n                <Loader2 className=\"w-3 h-3 animate-spin\" />\n              ) : (\n                <Play className=\"w-3 h-3\" />\n              )}\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"p-3 space-y-3\">\n        {/* Prompt Input */}\n        <div>\n          <label className=\"text-xs text-gray-400 mb-1 block\">Image Prompt:</label>\n          <textarea\n            value={localPrompt}\n            onChange={(e) => setLocalPrompt(e.target.value)}\n            placeholder=\"Describe the image you want to generate...\"\n            className=\"w-full h-16 px-2 py-1 bg-gray-700 border border-gray-600 rounded text-sm text-white placeholder-gray-400 resize-none focus:outline-none focus:border-yellow-500\"\n          />\n        </div>\n\n        {/* Connected Inputs Indicator */}\n        {data.executeWorkflow && data.nodeId && (\n          <div className=\"text-xs bg-blue-900/20 border border-blue-700/30 rounded p-2\">\n            <div className=\"flex items-center space-x-1 text-blue-300\">\n              <span>🔗</span>\n              <span>Will use connected text as prompt</span>\n            </div>\n          </div>\n        )}\n\n        {/* Settings (Expandable) */}\n        {isExpanded && (\n          <div className=\"space-y-2 border-t border-gray-700 pt-3\">\n            <div>\n              <label className=\"text-xs text-gray-400 mb-1 block\">Size:</label>\n              <select\n                value={size}\n                onChange={(e) => setSize(e.target.value)}\n                className=\"w-full px-2 py-1 bg-gray-700 border border-gray-600 rounded text-sm text-white focus:outline-none focus:border-yellow-500\"\n              >\n                <option value=\"1024x1024\">Square (1024x1024)</option>\n                <option value=\"1792x1024\">Landscape (1792x1024)</option>\n                <option value=\"1024x1792\">Portrait (1024x1792)</option>\n              </select>\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-2\">\n              <div>\n                <label className=\"text-xs text-gray-400 mb-1 block\">Quality:</label>\n                <select\n                  value={quality}\n                  onChange={(e) => setQuality(e.target.value)}\n                  className=\"w-full px-2 py-1 bg-gray-700 border border-gray-600 rounded text-sm text-white focus:outline-none focus:border-yellow-500\"\n                >\n                  <option value=\"standard\">Standard</option>\n                  <option value=\"hd\">HD</option>\n                </select>\n              </div>\n              \n              <div>\n                <label className=\"text-xs text-gray-400 mb-1 block\">Style:</label>\n                <select\n                  value={style}\n                  onChange={(e) => setStyle(e.target.value)}\n                  className=\"w-full px-2 py-1 bg-gray-700 border border-gray-600 rounded text-sm text-white focus:outline-none focus:border-yellow-500\"\n                >\n                  <option value=\"vivid\">Vivid</option>\n                  <option value=\"natural\">Natural</option>\n                </select>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Generated Image */}\n        {(imageUrl || isGenerating) && (\n          <div>\n            <div className=\"flex items-center justify-between mb-2\">\n              <label className=\"text-xs text-gray-400\">Generated Image:</label>\n              {imageUrl && (\n                <button\n                  onClick={downloadImage}\n                  className=\"text-xs text-yellow-300 hover:text-white flex items-center space-x-1\"\n                >\n                  <Download className=\"w-3 h-3\" />\n                  <span>Download</span>\n                </button>\n              )}\n            </div>\n            <div className=\"aspect-square bg-gray-700 border border-gray-600 rounded overflow-hidden\">\n              {isGenerating ? (\n                <div className=\"w-full h-full flex items-center justify-center\">\n                  <div className=\"text-center text-yellow-400\">\n                    <Loader2 className=\"w-8 h-8 animate-spin mx-auto mb-2\" />\n                    <p className=\"text-sm\">Generating image...</p>\n                    <p className=\"text-xs text-gray-400\">This may take 10-30 seconds</p>\n                  </div>\n                </div>\n              ) : imageUrl ? (\n                <img\n                  src={imageUrl}\n                  alt=\"Generated\"\n                  className=\"w-full h-full object-cover\"\n                />\n              ) : null}\n            </div>\n          </div>\n        )}\n\n        {/* Revised Prompt */}\n        {revisedPrompt && (\n          <div>\n            <label className=\"text-xs text-gray-400 mb-1 block\">DALL-E Revised Prompt:</label>\n            <div className=\"text-xs text-gray-300 bg-gray-700 border border-gray-600 rounded p-2\">\n              {revisedPrompt}\n            </div>\n          </div>\n        )}\n\n        {/* Node Info */}\n        <div className=\"flex items-center justify-between text-xs text-gray-400 border-t border-gray-700 pt-2\">\n          <div className=\"flex items-center space-x-1\">\n            <ImageIcon className=\"w-3 h-3\" />\n            <span>DALL-E 3</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            {imageUrl && (\n              <span className=\"flex items-center space-x-1 text-green-400\">\n                <Zap className=\"w-3 h-3\" />\n                <span>Ready</span>\n              </span>\n            )}\n            <span>{size}</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Input Handle */}\n      <Handle\n        type=\"target\"\n        position={Position.Left}\n        style={{\n          background: '#EAB308',\n          border: '2px solid #CA8A04',\n          width: 12,\n          height: 12,\n        }}\n      />\n\n      {/* Output Handle */}\n      <Handle\n        type=\"source\"\n        position={Position.Right}\n        style={{\n          background: '#EAB308',\n          border: '2px solid #CA8A04',\n          width: 12,\n          height: 12,\n        }}\n      />\n    </div>\n  );\n}\n\nexport default memo(ImageGenerationNode);\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3783, "column": 0}, "map": {"version":3,"sources":["file:///Users/oliver.ree/Developer/Personal/Daisy/daisy-platform/src/components/AnimatedEdge.tsx"],"sourcesContent":["'use client';\n\nimport React, { useMemo } from 'react';\nimport { EdgeProps, getBezierPath, Position } from 'reactflow';\n\ninterface AnimatedEdgeData {\n  sourceType?: string;\n  isActive?: boolean;\n  isDragging?: boolean;\n}\n\nexport default function AnimatedEdge({\n  id,\n  sourceX,\n  sourceY,\n  targetX,\n  targetY,\n  sourcePosition,\n  targetPosition,\n  data,\n  selected,\n}: EdgeProps<AnimatedEdgeData>) {\n  const [edgePath] = getBezierPath({\n    sourceX,\n    sourceY,\n    sourcePosition,\n    targetX,\n    targetY,\n    targetPosition,\n  });\n\n  const edgeStyles = useMemo(() => {\n    const isActive = data?.isActive || false;\n    const isDragging = data?.isDragging || false;\n\n    // Simplified styles during dragging for performance\n    if (isDragging) {\n      return {\n        stroke: '#6b7280',\n        strokeWidth: 2,\n        strokeDasharray: 'none',\n        filter: 'none',\n      };\n    }\n\n    // Static grey line when not active\n    if (!isActive) {\n      return {\n        stroke: '#6b7280',\n        strokeWidth: 2,\n        strokeDasharray: 'none',\n        filter: 'none',\n      };\n    }\n\n    // White traveling section when active - handled by CSS animation\n    // Don't set strokeDasharray here - let CSS handle it\n    return {\n      stroke: '#ffffff',\n      strokeWidth: 3,\n      filter: 'none',\n    };\n  }, [data?.isActive, data?.isDragging]);\n\n  const animationClass = useMemo(() => {\n    const isActive = data?.isActive || false;\n    const isDragging = data?.isDragging || false;\n    \n    // No animation classes during dragging\n    if (isDragging) return '';\n    \n    // Simple animated class when active\n    if (isActive) return 'animated';\n    return '';\n  }, [data?.isActive, data?.isDragging]);\n\n  // Skip expensive effects during dragging\n  const isDragging = data?.isDragging || false;\n  const isActive = data?.isActive || false;\n\n  return (\n    <>\n      {/* Main animated path */}\n      <path\n        id={id}\n        className={animationClass ? `react-flow__edge-path ${animationClass}` : 'react-flow__edge-path'}\n        d={edgePath}\n        style={{\n          ...edgeStyles,\n          // Disable will-change during dragging to improve performance\n          willChange: isDragging ? 'auto' : 'transform',\n        }}\n        fill=\"none\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        markerEnd={`url(#arrow-default)`}\n      />\n      \n      \n    </>\n  );\n}\n\n// Simple marker definition\nexport function EdgeMarkers() {\n  return (\n    <defs>\n      <marker\n        id=\"arrow-default\"\n        markerWidth=\"8\"\n        markerHeight=\"8\"\n        refX=\"6\"\n        refY=\"4\"\n        orient=\"auto\"\n        markerUnits=\"strokeWidth\"\n      >\n        <path\n          d=\"M0,0 L0,8 L6,4 z\"\n          fill=\"#6b7280\"\n        />\n      </marker>\n    </defs>\n  );\n}"],"names":[],"mappings":";;;;;;;AAEA;AACA;;;AAHA;;;AAWe,SAAS,aAAa,KAUP;QAVO,EACnC,EAAE,EACF,OAAO,EACP,OAAO,EACP,OAAO,EACP,OAAO,EACP,cAAc,EACd,cAAc,EACd,IAAI,EACJ,QAAQ,EACoB,GAVO;;IAWnC,MAAM,CAAC,SAAS,GAAG,IAAA,gLAAa,EAAC;QAC/B;QACA;QACA;QACA;QACA;QACA;IACF;IAEA,MAAM,aAAa,IAAA,wKAAO;4CAAC;YACzB,MAAM,WAAW,CAAA,iBAAA,2BAAA,KAAM,QAAQ,KAAI;YACnC,MAAM,aAAa,CAAA,iBAAA,2BAAA,KAAM,UAAU,KAAI;YAEvC,oDAAoD;YACpD,IAAI,YAAY;gBACd,OAAO;oBACL,QAAQ;oBACR,aAAa;oBACb,iBAAiB;oBACjB,QAAQ;gBACV;YACF;YAEA,mCAAmC;YACnC,IAAI,CAAC,UAAU;gBACb,OAAO;oBACL,QAAQ;oBACR,aAAa;oBACb,iBAAiB;oBACjB,QAAQ;gBACV;YACF;YAEA,iEAAiE;YACjE,qDAAqD;YACrD,OAAO;gBACL,QAAQ;gBACR,aAAa;gBACb,QAAQ;YACV;QACF;2CAAG;QAAC,iBAAA,2BAAA,KAAM,QAAQ;QAAE,iBAAA,2BAAA,KAAM,UAAU;KAAC;IAErC,MAAM,iBAAiB,IAAA,wKAAO;gDAAC;YAC7B,MAAM,WAAW,CAAA,iBAAA,2BAAA,KAAM,QAAQ,KAAI;YACnC,MAAM,aAAa,CAAA,iBAAA,2BAAA,KAAM,UAAU,KAAI;YAEvC,uCAAuC;YACvC,IAAI,YAAY,OAAO;YAEvB,oCAAoC;YACpC,IAAI,UAAU,OAAO;YACrB,OAAO;QACT;+CAAG;QAAC,iBAAA,2BAAA,KAAM,QAAQ;QAAE,iBAAA,2BAAA,KAAM,UAAU;KAAC;IAErC,yCAAyC;IACzC,MAAM,aAAa,CAAA,iBAAA,2BAAA,KAAM,UAAU,KAAI;IACvC,MAAM,WAAW,CAAA,iBAAA,2BAAA,KAAM,QAAQ,KAAI;IAEnC,qBACE;kBAEE,cAAA,6LAAC;YACC,IAAI;YACJ,WAAW,iBAAiB,AAAC,yBAAuC,OAAf,kBAAmB;YACxE,GAAG;YACH,OAAO;gBACL,GAAG,UAAU;gBACb,6DAA6D;gBAC7D,YAAY,aAAa,SAAS;YACpC;YACA,MAAK;YACL,eAAc;YACd,gBAAe;YACf,WAAY;;;;;;;AAMpB;GA1FwB;KAAA;AA6FjB,SAAS;IACd,qBACE,6LAAC;kBACC,cAAA,6LAAC;YACC,IAAG;YACH,aAAY;YACZ,cAAa;YACb,MAAK;YACL,MAAK;YACL,QAAO;YACP,aAAY;sBAEZ,cAAA,6LAAC;gBACC,GAAE;gBACF,MAAK;;;;;;;;;;;;;;;;AAKf;MAnBgB","debugId":null}},
    {"offset": {"line": 3922, "column": 0}, "map": {"version":3,"sources":["file:///Users/oliver.ree/Developer/Personal/Daisy/daisy-platform/src/components/WorkflowCanvas.tsx"],"sourcesContent":["'use client';\n\nimport React, { useCallback, useRef, useState, useEffect } from 'react';\nimport ReactFlow, {\n  addEdge,\n  applyEdgeChanges,\n  applyNodeChanges,\n  Background,\n  Connection,\n  Controls,\n  Edge,\n  EdgeChange,\n  Node,\n  NodeChange,\n  useReactFlow,\n  ReactFlowProvider,\n} from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport '../styles/animated-edges.css';\nimport { FileText, Image, Video, Brain, Zap, Monitor, Settings } from 'lucide-react';\n\nimport TextInputNode from './nodes/TextInputNode';\nimport ImageInputNode from './nodes/ImageInputNode';\nimport AIPromptNode from './nodes/AIPromptNode';\nimport TextProcessorNode from './nodes/TextProcessorNode';\nimport OutputNode from './nodes/OutputNode';\nimport ImageGenerationNode from './nodes/ImageGenerationNode';\nimport AnimatedEdge, { EdgeMarkers } from './AnimatedEdge';\n\nconst nodeTypes = {\n  textInput: TextInputNode,\n  imageInput: ImageInputNode,\n  aiPrompt: AIPromptNode,\n  textProcessor: TextProcessorNode,\n  imageGeneration: ImageGenerationNode,\n  output: OutputNode,\n};\n\nconst edgeTypes = {\n  animated: AnimatedEdge,\n};\n\nconst initialNodes: Node[] = [\n  {\n    id: 'welcome',\n    type: 'textInput',\n    position: { x: 100, y: 100 },\n    data: { \n      label: 'Welcome Text',\n      value: 'Welcome to Daisy AI Workflow Editor! Drag nodes from the sidebar to get started.',\n    },\n  },\n];\n\nconst initialEdges: Edge[] = [];\n\nlet id = 0;\nconst getId = () => `dnd_${id++}`;\n\n// Context Menu Component\ninterface ContextMenuProps {\n  x: number;\n  y: number;\n  onNodeCreate: (nodeType: string) => void;\n  onClose: () => void;\n}\n\nfunction ContextMenu({ x, y, onNodeCreate, onClose }: ContextMenuProps) {\n  const menuRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (menuRef.current && !menuRef.current.contains(event.target as Element)) {\n        onClose();\n      }\n    };\n\n    const handleKeyPress = (event: KeyboardEvent) => {\n      switch (event.key.toLowerCase()) {\n        case 't': onNodeCreate('textInput'); break;\n        case 'i': onNodeCreate('imageInput'); break;\n        case 'a': onNodeCreate('aiPrompt'); break;\n        case 'g': onNodeCreate('imageGeneration'); break;\n        case 'o': onNodeCreate('output'); break;\n        case 'p': onNodeCreate('textProcessor'); break;\n        case 'escape': onClose(); break;\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    document.addEventListener('keydown', handleKeyPress);\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n      document.removeEventListener('keydown', handleKeyPress);\n    };\n  }, [onNodeCreate, onClose]);\n\n  const menuItems = [\n    { type: 'textInput', label: 'Text', icon: FileText, shortcut: 'T' },\n    { type: 'imageInput', label: 'Image', icon: Image, shortcut: 'I' },\n    { type: 'aiPrompt', label: 'AI Prompt', icon: Brain, shortcut: 'A' },\n    { type: 'imageGeneration', label: 'Generate', icon: Zap, shortcut: 'G' },\n    { type: 'textProcessor', label: 'Process', icon: Settings, shortcut: 'P' },\n    { type: 'output', label: 'Output', icon: Monitor, shortcut: 'O' },\n  ];\n\n  return (\n    <div\n      ref={menuRef}\n      className=\"fixed z-50 bg-gray-800 border border-gray-600 rounded-lg shadow-2xl p-2 min-w-[200px]\"\n      style={{ left: x, top: y }}\n    >\n      <div className=\"text-xs text-gray-400 px-2 py-1 mb-1 border-b border-gray-700\">\n        Add Block\n      </div>\n      {menuItems.map((item) => {\n        const Icon = item.icon;\n        return (\n          <button\n            key={item.type}\n            onClick={() => onNodeCreate(item.type)}\n            className=\"w-full flex items-center justify-between px-3 py-2 text-left hover:bg-gray-700 rounded text-white text-sm transition-colors\"\n          >\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-8 h-8 bg-gray-700 rounded flex items-center justify-center\">\n                <Icon className=\"w-4 h-4\" />\n              </div>\n              <span>{item.label}</span>\n            </div>\n            <span className=\"text-xs text-gray-400 font-mono\">{item.shortcut}</span>\n          </button>\n        );\n      })}\n      <div className=\"text-xs text-gray-500 px-2 py-1 mt-2 border-t border-gray-700\">\n        Press ESC to close • Use shortcuts\n      </div>\n    </div>\n  );\n}\n\nfunction WorkflowCanvasInner() {\n  const reactFlowWrapper = useRef<HTMLDivElement>(null);\n  const [nodes, setNodes] = useState<Node[]>(initialNodes);\n  const [edges, setEdges] = useState<Edge[]>(initialEdges);\n  const [reactFlowInstance, setReactFlowInstance] = useState<any>(null);\n  const [contextMenu, setContextMenu] = useState<{ x: number; y: number } | null>(null);\n  const [lastClickTime, setLastClickTime] = useState<number>(0);\n  const [lastClickPosition, setLastClickPosition] = useState<{ x: number; y: number } | null>(null);\n  const [isDraggingFile, setIsDraggingFile] = useState<boolean>(false);\n  const [activeEdges, setActiveEdges] = useState<Set<string>>(new Set());\n  const [isDraggingNode, setIsDraggingNode] = useState<boolean>(false);\n\n  const onNodesChange = useCallback(\n    (changes: NodeChange[]) => {\n      // Detect if any node is being dragged\n      const isDragging = changes.some(change => \n        change.type === 'position' && change.dragging\n      );\n      \n      setIsDraggingNode(isDragging);\n      setNodes((nds) => applyNodeChanges(changes, nds));\n    },\n    [setNodes]\n  );\n\n  const onEdgesChange = useCallback(\n    (changes: EdgeChange[]) => setEdges((eds) => applyEdgeChanges(changes, eds)),\n    [setEdges]\n  );\n\n  const onConnect = useCallback(\n    (connection: Connection) => {\n      const newEdge = {\n        ...connection,\n        id: `edge-${connection.source}-${connection.target}`,\n        type: 'animated',\n        animated: true,\n        data: {\n          isActive: false,\n        },\n      };\n      \n      setEdges((eds) => addEdge(newEdge, eds));\n    },\n    [setEdges]\n  );\n\n  const onDragOver = useCallback((event: React.DragEvent) => {\n    event.preventDefault();\n    \n    // Check if dragging from node library or files from desktop\n    const reactFlowNodeType = event.dataTransfer.getData('application/reactflow');\n    const hasFiles = event.dataTransfer.files && event.dataTransfer.files.length > 0;\n    const hasItems = event.dataTransfer.items && event.dataTransfer.items.length > 0;\n    \n    if (reactFlowNodeType) {\n      // Node from library\n      event.dataTransfer.dropEffect = 'move';\n      setIsDraggingFile(false);\n    } else if (hasFiles || hasItems) {\n      // Files from desktop\n      event.dataTransfer.dropEffect = 'copy';\n      setIsDraggingFile(true);\n    } else {\n      event.dataTransfer.dropEffect = 'move';\n      setIsDraggingFile(false);\n    }\n  }, []);\n\n  // Helper function to convert file to data URL\n  const fileToDataURL = (file: File): Promise<string> => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => resolve(reader.result as string);\n      reader.onerror = reject;\n      reader.readAsDataURL(file);\n    });\n  };\n\n  // Helper function to read text file\n  const fileToText = (file: File): Promise<string> => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => resolve(reader.result as string);\n      reader.onerror = reject;\n      reader.readAsText(file);\n    });\n  };\n\n  const onDrop = useCallback(\n    async (event: React.DragEvent) => {\n      event.preventDefault();\n      setIsDraggingFile(false);\n\n      const reactFlowBounds = reactFlowWrapper.current?.getBoundingClientRect();\n      if (!reactFlowBounds || !reactFlowInstance) {\n        return;\n      }\n\n      const position = reactFlowInstance.project({\n        x: event.clientX - reactFlowBounds.left,\n        y: event.clientY - reactFlowBounds.top,\n      });\n\n      // Handle node library drops\n      const nodeType = event.dataTransfer.getData('application/reactflow');\n      if (nodeType) {\n        const newNodeData = {\n          textInput: { \n            label: 'Text Input',\n            value: 'Enter your text here...',\n            placeholder: 'Type something...'\n          },\n          imageInput: { \n            label: 'Image Input',\n            imageUrl: '',\n            description: 'Upload or paste image URL'\n          },\n          aiPrompt: { \n            label: 'AI Prompt',\n            prompt: 'Create a detailed description of:',\n            model: 'gpt-4o',\n            temperature: 0.7,\n            maxTokens: 1000\n          },\n          textProcessor: { \n            label: 'Text Processor',\n            operation: 'uppercase',\n            customOperation: ''\n          },\n          imageGeneration: { \n            label: 'Image Generation',\n            prompt: 'A beautiful landscape painting...',\n            size: '1024x1024',\n            quality: 'standard',\n            style: 'vivid'\n          },\n          output: { \n            label: 'Output',\n            value: '',\n            format: 'text'\n          },\n        };\n\n        const newNode: Node = {\n          id: getId(),\n          type: nodeType,\n          position,\n          data: newNodeData[nodeType as keyof typeof newNodeData] || { label: `${nodeType} node` },\n        };\n\n        setNodes((nds) => nds.concat(newNode));\n        return;\n      }\n\n      // Handle file drops from desktop\n      const files = Array.from(event.dataTransfer.files);\n      if (files.length === 0) return;\n\n      for (let i = 0; i < files.length; i++) {\n        const file = files[i];\n        const filePosition = {\n          x: position.x + (i * 20), // Offset multiple files\n          y: position.y + (i * 20)\n        };\n\n        try {\n          if (file.type.startsWith('image/')) {\n            // Handle image files\n            const dataURL = await fileToDataURL(file);\n            const newNode: Node = {\n              id: getId(),\n              type: 'imageInput',\n              position: filePosition,\n              data: {\n                label: `Image: ${file.name}`,\n                imageUrl: dataURL,\n                description: `Uploaded: ${file.name} (${(file.size / 1024).toFixed(1)} KB)`,\n                fileName: file.name,\n                fileSize: file.size\n              },\n            };\n            setNodes((nds) => nds.concat(newNode));\n          } else if (file.type.startsWith('text/') || file.name.endsWith('.txt') || file.name.endsWith('.md')) {\n            // Handle text files\n            const textContent = await fileToText(file);\n            const newNode: Node = {\n              id: getId(),\n              type: 'textInput',\n              position: filePosition,\n              data: {\n                label: `Text: ${file.name}`,\n                value: textContent,\n                placeholder: `Content from ${file.name}`,\n                fileName: file.name,\n                fileSize: file.size\n              },\n            };\n            setNodes((nds) => nds.concat(newNode));\n          } else {\n            // Handle other file types as text input with file info\n            const newNode: Node = {\n              id: getId(),\n              type: 'textInput',\n              position: filePosition,\n              data: {\n                label: `File: ${file.name}`,\n                value: `File uploaded: ${file.name}\\nType: ${file.type || 'unknown'}\\nSize: ${(file.size / 1024).toFixed(1)} KB`,\n                placeholder: 'File information',\n                fileName: file.name,\n                fileSize: file.size\n              },\n            };\n            setNodes((nds) => nds.concat(newNode));\n          }\n        } catch (error) {\n          console.error('Error processing file:', file.name, error);\n          // Create an error node if file processing fails\n          const errorNode: Node = {\n            id: getId(),\n            type: 'textInput',\n            position: filePosition,\n            data: {\n              label: `Error: ${file.name}`,\n              value: `Failed to process file: ${file.name}\\nError: ${error}`,\n              placeholder: 'File processing error'\n            },\n          };\n          setNodes((nds) => nds.concat(errorNode));\n        }\n      }\n    },\n    [reactFlowInstance]\n  );\n\n  // Handle click on canvas to detect double-clicks\n  const onPaneClick = useCallback(\n    (event: React.MouseEvent) => {\n      const currentTime = Date.now();\n      const x = event.clientX;\n      const y = event.clientY;\n      \n      // Check if this is a double-click (within 300ms and close position)\n      const timeDiff = currentTime - lastClickTime;\n      const positionDiff = lastClickPosition ? \n        Math.sqrt(Math.pow(x - lastClickPosition.x, 2) + Math.pow(y - lastClickPosition.y, 2)) : 100;\n      \n      if (timeDiff < 300 && positionDiff < 10) {\n        // Double click detected\n        event.preventDefault();\n        setContextMenu({ x, y });\n        // Reset to prevent triple-click issues\n        setLastClickTime(0);\n        setLastClickPosition(null);\n      } else {\n        // Single click - store time and position for next click\n        setLastClickTime(currentTime);\n        setLastClickPosition({ x, y });\n        // Close context menu if it's open\n        if (contextMenu) {\n          setContextMenu(null);\n        }\n      }\n    },\n    [lastClickTime, lastClickPosition, contextMenu]\n  );\n\n  // Create node at the position where context menu was opened\n  const createNodeAtPosition = useCallback(\n    (nodeType: string) => {\n      if (!contextMenu || !reactFlowInstance) return;\n\n      const reactFlowBounds = reactFlowWrapper.current?.getBoundingClientRect();\n      if (!reactFlowBounds) return;\n\n      // Convert screen coordinates to canvas coordinates\n      const position = reactFlowInstance.project({\n        x: contextMenu.x - reactFlowBounds.left,\n        y: contextMenu.y - reactFlowBounds.top,\n      });\n\n      const newNodeData = {\n        textInput: { \n          label: 'Text Input',\n          value: 'Enter your text here...',\n          placeholder: 'Type something...'\n        },\n        imageInput: { \n          label: 'Image Input',\n          imageUrl: '',\n          description: 'Upload or paste image URL'\n        },\n        aiPrompt: { \n          label: 'AI Prompt',\n          prompt: 'Create a detailed description of:',\n          model: 'gpt-4o',\n          temperature: 0.7,\n          maxTokens: 1000\n        },\n        textProcessor: { \n          label: 'Text Processor',\n          operation: 'uppercase',\n          customOperation: ''\n        },\n        imageGeneration: { \n          label: 'Image Generation',\n          prompt: 'A beautiful landscape painting...',\n          size: '1024x1024',\n          quality: 'standard',\n          style: 'vivid'\n        },\n        output: { \n          label: 'Output',\n          value: '',\n          format: 'text'\n        },\n      };\n\n      const newNode: Node = {\n        id: getId(),\n        type: nodeType,\n        position,\n        data: newNodeData[nodeType as keyof typeof newNodeData] || { label: `${nodeType} node` },\n      };\n\n      setNodes((nds) => nds.concat(newNode));\n      setContextMenu(null); // Close menu after creating node\n    },\n    [contextMenu, reactFlowInstance]\n  );\n\n  const closeContextMenu = useCallback(() => {\n    setContextMenu(null);\n  }, []);\n\n  // Test animation function - activates ALL edges\n  const testAnimation = useCallback(() => {\n    console.log('Testing animation - activating all edges');\n    console.log('Current edges:', edges);\n    const allEdgeIds = edges.map(edge => edge.id);\n    console.log('All edge IDs:', allEdgeIds);\n    setActiveEdges(new Set(allEdgeIds));\n    \n    // Force re-render of edges to apply new styles\n    setEdges(currentEdges => [...currentEdges]);\n    \n    // Deactivate after 5 seconds\n    setTimeout(() => {\n      setActiveEdges(new Set());\n      console.log('Test animation ended');\n    }, 5000);\n  }, [edges, setEdges]);\n\n  // Handle drag leave to reset dragging state\n  const onDragLeave = useCallback((event: React.DragEvent) => {\n    // Only reset if actually leaving the canvas area\n    const rect = reactFlowWrapper.current?.getBoundingClientRect();\n    if (rect) {\n      const isOutside = event.clientX < rect.left || event.clientX > rect.right ||\n                       event.clientY < rect.top || event.clientY > rect.bottom;\n      if (isOutside) {\n        setIsDraggingFile(false);\n      }\n    }\n  }, []);\n\n  const onNodeDataChange = useCallback((nodeId: string, data: any) => {\n    setNodes((nds) =>\n      nds.map((node) => {\n        if (node.id === nodeId) {\n          return { ...node, data: { ...node.data, ...data } };\n        }\n        return node;\n      })\n    );\n  }, []);\n\n  // Function to get connected input nodes for a given node\n  const getConnectedInputs = useCallback((nodeId: string) => {\n    const connectedInputs: Array<{ nodeId: string; data: any; type: string }> = [];\n    \n    // Find all edges that connect TO this node (inputs)\n    const incomingEdges = edges.filter(edge => edge.target === nodeId);\n    \n    incomingEdges.forEach(edge => {\n      const sourceNode = nodes.find(node => node.id === edge.source);\n      if (sourceNode) {\n        connectedInputs.push({\n          nodeId: sourceNode.id,\n          data: sourceNode.data,\n          type: sourceNode.type || 'unknown'\n        });\n      }\n    });\n    \n    return connectedInputs;\n  }, [nodes, edges]);\n\n  // Function to execute a workflow starting from a specific node\n  const executeWorkflow = useCallback(async (nodeId: string, context: any = {}) => {\n    const connectedInputs = getConnectedInputs(nodeId);\n    \n    console.log('executeWorkflow called for node:', nodeId);\n    console.log('Connected inputs:', connectedInputs);\n    \n    // Prepare context from connected inputs\n    let combinedContext = '';\n    let imageContext = '';\n    \n    connectedInputs.forEach(input => {\n      console.log('Processing input:', input.type, input.data);\n      \n      switch (input.type) {\n        case 'textInput':\n          if (input.data.value) {\n            combinedContext += `Text Input: ${input.data.value}\\n`;\n          }\n          break;\n        case 'imageInput':\n          if (input.data.imageUrl) {\n            imageContext = input.data.imageUrl;\n            combinedContext += `Image: [Image provided]\\n`;\n            console.log('Found image input:', input.data.imageUrl.substring(0, 50) + '...');\n          }\n          break;\n        case 'textProcessor':\n          if (input.data.outputText) {\n            combinedContext += `Processed Text: ${input.data.outputText}\\n`;\n          }\n          break;\n        case 'aiPrompt':\n          if (input.data.response) {\n            combinedContext += `AI Response: ${input.data.response}\\n`;\n          }\n          break;\n        case 'imageGeneration':\n          if (input.data.imageUrl) {\n            imageContext = input.data.imageUrl;\n            combinedContext += `Generated Image: [Image generated from DALL-E]\\n`;\n            if (input.data.revisedPrompt) {\n              combinedContext += `Original Prompt: ${input.data.revisedPrompt}\\n`;\n            }\n          }\n          break;\n      }\n    });\n    \n    console.log('Final context - text:', combinedContext);\n    console.log('Final context - image:', imageContext ? 'Image present' : 'No image');\n    \n    return {\n      textContext: combinedContext.trim(),\n      imageContext: imageContext,\n      connectedInputs: connectedInputs\n    };\n  }, [getConnectedInputs]);\n\n  // Function to activate edges when data is flowing\n  const activateEdgeFlow = useCallback((nodeId: string, duration: number = 3000) => {\n    // Find all edges connected TO this node\n    const incomingEdgeIds = edges\n      .filter(edge => edge.target === nodeId)\n      .map(edge => edge.id);\n    \n    // Activate the edges\n    setActiveEdges(prev => {\n      const newSet = new Set(prev);\n      incomingEdgeIds.forEach(id => newSet.add(id));\n      return newSet;\n    });\n    \n    // Deactivate after duration\n    setTimeout(() => {\n      setActiveEdges(prev => {\n        const newSet = new Set(prev);\n        incomingEdgeIds.forEach(id => newSet.delete(id));\n        return newSet;\n      });\n    }, duration);\n  }, [edges]);\n\n      // Enhanced edges with activity state and drag optimization\n  const enhancedEdges = edges.map(edge => ({\n    ...edge,\n    data: {\n      ...edge.data,\n      isActive: activeEdges.has(edge.id) && !isDraggingNode,\n      isDragging: isDraggingNode,\n    },\n    // Simplify edge type during dragging for performance\n    type: isDraggingNode ? 'default' : 'animated',\n    animated: !isDraggingNode,\n    style: {\n      strokeWidth: 2,\n      transition: isDraggingNode ? 'none' : 'all 0.2s ease',\n    },\n  }));\n\n  // Create enhanced nodes with workflow execution capabilities\n  const enhancedNodes = nodes.map(node => ({\n    ...node,\n    data: {\n      ...node.data,\n      nodeId: node.id,\n      executeWorkflow,\n      onDataChange: (data: any) => onNodeDataChange(node.id, data),\n      activateEdgeFlow: () => activateEdgeFlow(node.id),\n    }\n  }));\n\n  return (\n    <div className=\"w-full h-full\" ref={reactFlowWrapper}>\n      {/* Test Animation Button */}\n      <div className=\"absolute top-4 right-4 z-50\">\n        <button\n          onClick={testAnimation}\n          className=\"px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white text-sm rounded shadow-lg transition-colors flex items-center space-x-2\"\n        >\n          <span>⚡</span>\n          <span>Test Animation (v2)</span>\n        </button>\n      </div>\n\n      {/* File drop overlay */}\n      {isDraggingFile && (\n        <div className=\"absolute inset-0 z-40 bg-blue-500/20 border-4 border-dashed border-blue-400 flex items-center justify-center pointer-events-none\">\n          <div className=\"bg-gray-800/90 px-6 py-4 rounded-lg border border-gray-600\">\n            <div className=\"text-center\">\n              <div className=\"text-4xl mb-2\">📁</div>\n              <div className=\"text-white font-medium mb-1\">Drop files here</div>\n              <div className=\"text-gray-300 text-sm\">Images, text files, and more...</div>\n            </div>\n          </div>\n        </div>\n      )}\n      \n      <ReactFlow\n        nodes={enhancedNodes}\n        edges={enhancedEdges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        onConnect={onConnect}\n        onNodeDragStart={() => setIsDraggingNode(true)}\n        onNodeDragStop={() => setIsDraggingNode(false)}\n        defaultEdgeOptions={{\n          type: 'animated',\n          animated: !isDraggingNode,\n        }}\n        onInit={setReactFlowInstance}\n        onDrop={onDrop}\n        onDragOver={onDragOver}\n        onDragLeave={onDragLeave}\n        onPaneClick={onPaneClick}\n        nodeTypes={nodeTypes}\n        edgeTypes={edgeTypes}\n        zoomOnDoubleClick={false}\n        defaultViewport={{ x: 0, y: 0, zoom: 0.5 }}\n        minZoom={0.1}\n        maxZoom={2}\n        translateExtent={[[-5000, -5000], [5000, 5000]]}\n        nodeExtent={[[-5000, -5000], [5000, 5000]]}\n        className={`bg-gray-900 ${isDraggingNode ? 'dragging' : ''}`}\n        proOptions={{ hideAttribution: true }}\n      >\n        <Controls className=\"bg-gray-800 border-gray-700\" />\n        <Background color=\"#374151\" gap={50} size={2} />\n        <EdgeMarkers />\n      </ReactFlow>\n      \n      {/* Context Menu */}\n      {contextMenu && (\n        <ContextMenu\n          x={contextMenu.x}\n          y={contextMenu.y}\n          onNodeCreate={createNodeAtPosition}\n          onClose={closeContextMenu}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default function WorkflowCanvas() {\n  return (\n    <ReactFlowProvider>\n      <WorkflowCanvasInner />\n    </ReactFlowProvider>\n  );\n}\n"],"names":[],"mappings":";;;;;AAEA;AACA;AAAA;AAAA;AAAA;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA3BA;;;;;;;;;;;;;AA6BA,MAAM,YAAY;IAChB,WAAW,0JAAa;IACxB,YAAY,2JAAc;IAC1B,UAAU,yJAAY;IACtB,eAAe,8JAAiB;IAChC,iBAAiB,gKAAmB;IACpC,QAAQ,uJAAU;AACpB;AAEA,MAAM,YAAY;IAChB,UAAU,gJAAY;AACxB;AAEA,MAAM,eAAuB;IAC3B;QACE,IAAI;QACJ,MAAM;QACN,UAAU;YAAE,GAAG;YAAK,GAAG;QAAI;QAC3B,MAAM;YACJ,OAAO;YACP,OAAO;QACT;IACF;CACD;AAED,MAAM,eAAuB,EAAE;AAE/B,IAAI,KAAK;AACT,MAAM,QAAQ,IAAM,AAAC,OAAW,OAAL;AAU3B,SAAS,YAAY,KAAiD;QAAjD,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE,OAAO,EAAoB,GAAjD;;IACnB,MAAM,UAAU,IAAA,uKAAM,EAAiB;IAEvC,IAAA,0KAAS;iCAAC;YACR,MAAM;4DAAqB,CAAC;oBAC1B,IAAI,QAAQ,OAAO,IAAI,CAAC,QAAQ,OAAO,CAAC,QAAQ,CAAC,MAAM,MAAM,GAAc;wBACzE;oBACF;gBACF;;YAEA,MAAM;wDAAiB,CAAC;oBACtB,OAAQ,MAAM,GAAG,CAAC,WAAW;wBAC3B,KAAK;4BAAK,aAAa;4BAAc;wBACrC,KAAK;4BAAK,aAAa;4BAAe;wBACtC,KAAK;4BAAK,aAAa;4BAAa;wBACpC,KAAK;4BAAK,aAAa;4BAAoB;wBAC3C,KAAK;4BAAK,aAAa;4BAAW;wBAClC,KAAK;4BAAK,aAAa;4BAAkB;wBACzC,KAAK;4BAAU;4BAAW;oBAC5B;gBACF;;YAEA,SAAS,gBAAgB,CAAC,aAAa;YACvC,SAAS,gBAAgB,CAAC,WAAW;YAErC;yCAAO;oBACL,SAAS,mBAAmB,CAAC,aAAa;oBAC1C,SAAS,mBAAmB,CAAC,WAAW;gBAC1C;;QACF;gCAAG;QAAC;QAAc;KAAQ;IAE1B,MAAM,YAAY;QAChB;YAAE,MAAM;YAAa,OAAO;YAAQ,MAAM,6NAAQ;YAAE,UAAU;QAAI;QAClE;YAAE,MAAM;YAAc,OAAO;YAAS,MAAM,gNAAK;YAAE,UAAU;QAAI;QACjE;YAAE,MAAM;YAAY,OAAO;YAAa,MAAM,gNAAK;YAAE,UAAU;QAAI;QACnE;YAAE,MAAM;YAAmB,OAAO;YAAY,MAAM,0MAAG;YAAE,UAAU;QAAI;QACvE;YAAE,MAAM;YAAiB,OAAO;YAAW,MAAM,yNAAQ;YAAE,UAAU;QAAI;QACzE;YAAE,MAAM;YAAU,OAAO;YAAU,MAAM,sNAAO;YAAE,UAAU;QAAI;KACjE;IAED,qBACE,6LAAC;QACC,KAAK;QACL,WAAU;QACV,OAAO;YAAE,MAAM;YAAG,KAAK;QAAE;;0BAEzB,6LAAC;gBAAI,WAAU;0BAAgE;;;;;;YAG9E,UAAU,GAAG,CAAC,CAAC;gBACd,MAAM,OAAO,KAAK,IAAI;gBACtB,qBACE,6LAAC;oBAEC,SAAS,IAAM,aAAa,KAAK,IAAI;oBACrC,WAAU;;sCAEV,6LAAC;4BAAI,WAAU;;8CACb,6LAAC;oCAAI,WAAU;8CACb,cAAA,6LAAC;wCAAK,WAAU;;;;;;;;;;;8CAElB,6LAAC;8CAAM,KAAK,KAAK;;;;;;;;;;;;sCAEnB,6LAAC;4BAAK,WAAU;sCAAmC,KAAK,QAAQ;;;;;;;mBAV3D,KAAK,IAAI;;;;;YAapB;0BACA,6LAAC;gBAAI,WAAU;0BAAgE;;;;;;;;;;;;AAKrF;GAxES;KAAA;AA0ET,SAAS;;IACP,MAAM,mBAAmB,IAAA,uKAAM,EAAiB;IAChD,MAAM,CAAC,OAAO,SAAS,GAAG,IAAA,yKAAQ,EAAS;IAC3C,MAAM,CAAC,OAAO,SAAS,GAAG,IAAA,yKAAQ,EAAS;IAC3C,MAAM,CAAC,mBAAmB,qBAAqB,GAAG,IAAA,yKAAQ,EAAM;IAChE,MAAM,CAAC,aAAa,eAAe,GAAG,IAAA,yKAAQ,EAAkC;IAChF,MAAM,CAAC,eAAe,iBAAiB,GAAG,IAAA,yKAAQ,EAAS;IAC3D,MAAM,CAAC,mBAAmB,qBAAqB,GAAG,IAAA,yKAAQ,EAAkC;IAC5F,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,IAAA,yKAAQ,EAAU;IAC9D,MAAM,CAAC,aAAa,eAAe,GAAG,IAAA,yKAAQ,EAAc,IAAI;IAChE,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,IAAA,yKAAQ,EAAU;IAE9D,MAAM,gBAAgB,IAAA,4KAAW;0DAC/B,CAAC;YACC,sCAAsC;YACtC,MAAM,aAAa,QAAQ,IAAI;6EAAC,CAAA,SAC9B,OAAO,IAAI,KAAK,cAAc,OAAO,QAAQ;;YAG/C,kBAAkB;YAClB;kEAAS,CAAC,MAAQ,IAAA,mLAAgB,EAAC,SAAS;;QAC9C;yDACA;QAAC;KAAS;IAGZ,MAAM,gBAAgB,IAAA,4KAAW;0DAC/B,CAAC,UAA0B;kEAAS,CAAC,MAAQ,IAAA,mLAAgB,EAAC,SAAS;;yDACvE;QAAC;KAAS;IAGZ,MAAM,YAAY,IAAA,4KAAW;sDAC3B,CAAC;YACC,MAAM,UAAU;gBACd,GAAG,UAAU;gBACb,IAAI,AAAC,QAA4B,OAArB,WAAW,MAAM,EAAC,KAAqB,OAAlB,WAAW,MAAM;gBAClD,MAAM;gBACN,UAAU;gBACV,MAAM;oBACJ,UAAU;gBACZ;YACF;YAEA;8DAAS,CAAC,MAAQ,IAAA,0KAAO,EAAC,SAAS;;QACrC;qDACA;QAAC;KAAS;IAGZ,MAAM,aAAa,IAAA,4KAAW;uDAAC,CAAC;YAC9B,MAAM,cAAc;YAEpB,4DAA4D;YAC5D,MAAM,oBAAoB,MAAM,YAAY,CAAC,OAAO,CAAC;YACrD,MAAM,WAAW,MAAM,YAAY,CAAC,KAAK,IAAI,MAAM,YAAY,CAAC,KAAK,CAAC,MAAM,GAAG;YAC/E,MAAM,WAAW,MAAM,YAAY,CAAC,KAAK,IAAI,MAAM,YAAY,CAAC,KAAK,CAAC,MAAM,GAAG;YAE/E,IAAI,mBAAmB;gBACrB,oBAAoB;gBACpB,MAAM,YAAY,CAAC,UAAU,GAAG;gBAChC,kBAAkB;YACpB,OAAO,IAAI,YAAY,UAAU;gBAC/B,qBAAqB;gBACrB,MAAM,YAAY,CAAC,UAAU,GAAG;gBAChC,kBAAkB;YACpB,OAAO;gBACL,MAAM,YAAY,CAAC,UAAU,GAAG;gBAChC,kBAAkB;YACpB;QACF;sDAAG,EAAE;IAEL,8CAA8C;IAC9C,MAAM,gBAAgB,CAAC;QACrB,OAAO,IAAI,QAAQ,CAAC,SAAS;YAC3B,MAAM,SAAS,IAAI;YACnB,OAAO,MAAM,GAAG,IAAM,QAAQ,OAAO,MAAM;YAC3C,OAAO,OAAO,GAAG;YACjB,OAAO,aAAa,CAAC;QACvB;IACF;IAEA,oCAAoC;IACpC,MAAM,aAAa,CAAC;QAClB,OAAO,IAAI,QAAQ,CAAC,SAAS;YAC3B,MAAM,SAAS,IAAI;YACnB,OAAO,MAAM,GAAG,IAAM,QAAQ,OAAO,MAAM;YAC3C,OAAO,OAAO,GAAG;YACjB,OAAO,UAAU,CAAC;QACpB;IACF;IAEA,MAAM,SAAS,IAAA,4KAAW;mDACxB,OAAO;gBAImB;YAHxB,MAAM,cAAc;YACpB,kBAAkB;YAElB,MAAM,mBAAkB,4BAAA,iBAAiB,OAAO,cAAxB,gDAAA,0BAA0B,qBAAqB;YACvE,IAAI,CAAC,mBAAmB,CAAC,mBAAmB;gBAC1C;YACF;YAEA,MAAM,WAAW,kBAAkB,OAAO,CAAC;gBACzC,GAAG,MAAM,OAAO,GAAG,gBAAgB,IAAI;gBACvC,GAAG,MAAM,OAAO,GAAG,gBAAgB,GAAG;YACxC;YAEA,4BAA4B;YAC5B,MAAM,WAAW,MAAM,YAAY,CAAC,OAAO,CAAC;YAC5C,IAAI,UAAU;gBACZ,MAAM,cAAc;oBAClB,WAAW;wBACT,OAAO;wBACP,OAAO;wBACP,aAAa;oBACf;oBACA,YAAY;wBACV,OAAO;wBACP,UAAU;wBACV,aAAa;oBACf;oBACA,UAAU;wBACR,OAAO;wBACP,QAAQ;wBACR,OAAO;wBACP,aAAa;wBACb,WAAW;oBACb;oBACA,eAAe;wBACb,OAAO;wBACP,WAAW;wBACX,iBAAiB;oBACnB;oBACA,iBAAiB;wBACf,OAAO;wBACP,QAAQ;wBACR,MAAM;wBACN,SAAS;wBACT,OAAO;oBACT;oBACA,QAAQ;wBACN,OAAO;wBACP,OAAO;wBACP,QAAQ;oBACV;gBACF;gBAEA,MAAM,UAAgB;oBACpB,IAAI;oBACJ,MAAM;oBACN;oBACA,MAAM,WAAW,CAAC,SAAqC,IAAI;wBAAE,OAAO,AAAC,GAAW,OAAT,UAAS;oBAAO;gBACzF;gBAEA;+DAAS,CAAC,MAAQ,IAAI,MAAM,CAAC;;gBAC7B;YACF;YAEA,iCAAiC;YACjC,MAAM,QAAQ,MAAM,IAAI,CAAC,MAAM,YAAY,CAAC,KAAK;YACjD,IAAI,MAAM,MAAM,KAAK,GAAG;YAExB,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,MAAM,EAAE,IAAK;gBACrC,MAAM,OAAO,KAAK,CAAC,EAAE;gBACrB,MAAM,eAAe;oBACnB,GAAG,SAAS,CAAC,GAAI,IAAI;oBACrB,GAAG,SAAS,CAAC,GAAI,IAAI;gBACvB;gBAEA,IAAI;oBACF,IAAI,KAAK,IAAI,CAAC,UAAU,CAAC,WAAW;wBAClC,qBAAqB;wBACrB,MAAM,UAAU,MAAM,cAAc;wBACpC,MAAM,UAAgB;4BACpB,IAAI;4BACJ,MAAM;4BACN,UAAU;4BACV,MAAM;gCACJ,OAAO,AAAC,UAAmB,OAAV,KAAK,IAAI;gCAC1B,UAAU;gCACV,aAAa,AAAC,aAA0B,OAAd,KAAK,IAAI,EAAC,MAAkC,OAA9B,CAAC,KAAK,IAAI,GAAG,IAAI,EAAE,OAAO,CAAC,IAAG;gCACtE,UAAU,KAAK,IAAI;gCACnB,UAAU,KAAK,IAAI;4BACrB;wBACF;wBACA;uEAAS,CAAC,MAAQ,IAAI,MAAM,CAAC;;oBAC/B,OAAO,IAAI,KAAK,IAAI,CAAC,UAAU,CAAC,YAAY,KAAK,IAAI,CAAC,QAAQ,CAAC,WAAW,KAAK,IAAI,CAAC,QAAQ,CAAC,QAAQ;wBACnG,oBAAoB;wBACpB,MAAM,cAAc,MAAM,WAAW;wBACrC,MAAM,UAAgB;4BACpB,IAAI;4BACJ,MAAM;4BACN,UAAU;4BACV,MAAM;gCACJ,OAAO,AAAC,SAAkB,OAAV,KAAK,IAAI;gCACzB,OAAO;gCACP,aAAa,AAAC,gBAAyB,OAAV,KAAK,IAAI;gCACtC,UAAU,KAAK,IAAI;gCACnB,UAAU,KAAK,IAAI;4BACrB;wBACF;wBACA;uEAAS,CAAC,MAAQ,IAAI,MAAM,CAAC;;oBAC/B,OAAO;wBACL,uDAAuD;wBACvD,MAAM,UAAgB;4BACpB,IAAI;4BACJ,MAAM;4BACN,UAAU;4BACV,MAAM;gCACJ,OAAO,AAAC,SAAkB,OAAV,KAAK,IAAI;gCACzB,OAAO,AAAC,kBAAqC,OAApB,KAAK,IAAI,EAAC,YAA2C,OAAjC,KAAK,IAAI,IAAI,WAAU,YAAwC,OAA9B,CAAC,KAAK,IAAI,GAAG,IAAI,EAAE,OAAO,CAAC,IAAG;gCAC5G,aAAa;gCACb,UAAU,KAAK,IAAI;gCACnB,UAAU,KAAK,IAAI;4BACrB;wBACF;wBACA;uEAAS,CAAC,MAAQ,IAAI,MAAM,CAAC;;oBAC/B;gBACF,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,0BAA0B,KAAK,IAAI,EAAE;oBACnD,gDAAgD;oBAChD,MAAM,YAAkB;wBACtB,IAAI;wBACJ,MAAM;wBACN,UAAU;wBACV,MAAM;4BACJ,OAAO,AAAC,UAAmB,OAAV,KAAK,IAAI;4BAC1B,OAAO,AAAC,2BAA+C,OAArB,KAAK,IAAI,EAAC,aAAiB,OAAN;4BACvD,aAAa;wBACf;oBACF;oBACA;mEAAS,CAAC,MAAQ,IAAI,MAAM,CAAC;;gBAC/B;YACF;QACF;kDACA;QAAC;KAAkB;IAGrB,iDAAiD;IACjD,MAAM,cAAc,IAAA,4KAAW;wDAC7B,CAAC;YACC,MAAM,cAAc,KAAK,GAAG;YAC5B,MAAM,IAAI,MAAM,OAAO;YACvB,MAAM,IAAI,MAAM,OAAO;YAEvB,oEAAoE;YACpE,MAAM,WAAW,cAAc;YAC/B,MAAM,eAAe,oBACnB,KAAK,IAAI,CAAC,KAAK,GAAG,CAAC,IAAI,kBAAkB,CAAC,EAAE,KAAK,KAAK,GAAG,CAAC,IAAI,kBAAkB,CAAC,EAAE,MAAM;YAE3F,IAAI,WAAW,OAAO,eAAe,IAAI;gBACvC,wBAAwB;gBACxB,MAAM,cAAc;gBACpB,eAAe;oBAAE;oBAAG;gBAAE;gBACtB,uCAAuC;gBACvC,iBAAiB;gBACjB,qBAAqB;YACvB,OAAO;gBACL,wDAAwD;gBACxD,iBAAiB;gBACjB,qBAAqB;oBAAE;oBAAG;gBAAE;gBAC5B,kCAAkC;gBAClC,IAAI,aAAa;oBACf,eAAe;gBACjB;YACF;QACF;uDACA;QAAC;QAAe;QAAmB;KAAY;IAGjD,4DAA4D;IAC5D,MAAM,uBAAuB,IAAA,4KAAW;iEACtC,CAAC;gBAGyB;YAFxB,IAAI,CAAC,eAAe,CAAC,mBAAmB;YAExC,MAAM,mBAAkB,4BAAA,iBAAiB,OAAO,cAAxB,gDAAA,0BAA0B,qBAAqB;YACvE,IAAI,CAAC,iBAAiB;YAEtB,mDAAmD;YACnD,MAAM,WAAW,kBAAkB,OAAO,CAAC;gBACzC,GAAG,YAAY,CAAC,GAAG,gBAAgB,IAAI;gBACvC,GAAG,YAAY,CAAC,GAAG,gBAAgB,GAAG;YACxC;YAEA,MAAM,cAAc;gBAClB,WAAW;oBACT,OAAO;oBACP,OAAO;oBACP,aAAa;gBACf;gBACA,YAAY;oBACV,OAAO;oBACP,UAAU;oBACV,aAAa;gBACf;gBACA,UAAU;oBACR,OAAO;oBACP,QAAQ;oBACR,OAAO;oBACP,aAAa;oBACb,WAAW;gBACb;gBACA,eAAe;oBACb,OAAO;oBACP,WAAW;oBACX,iBAAiB;gBACnB;gBACA,iBAAiB;oBACf,OAAO;oBACP,QAAQ;oBACR,MAAM;oBACN,SAAS;oBACT,OAAO;gBACT;gBACA,QAAQ;oBACN,OAAO;oBACP,OAAO;oBACP,QAAQ;gBACV;YACF;YAEA,MAAM,UAAgB;gBACpB,IAAI;gBACJ,MAAM;gBACN;gBACA,MAAM,WAAW,CAAC,SAAqC,IAAI;oBAAE,OAAO,AAAC,GAAW,OAAT,UAAS;gBAAO;YACzF;YAEA;yEAAS,CAAC,MAAQ,IAAI,MAAM,CAAC;;YAC7B,eAAe,OAAO,iCAAiC;QACzD;gEACA;QAAC;QAAa;KAAkB;IAGlC,MAAM,mBAAmB,IAAA,4KAAW;6DAAC;YACnC,eAAe;QACjB;4DAAG,EAAE;IAEL,gDAAgD;IAChD,MAAM,gBAAgB,IAAA,4KAAW;0DAAC;YAChC,QAAQ,GAAG,CAAC;YACZ,QAAQ,GAAG,CAAC,kBAAkB;YAC9B,MAAM,aAAa,MAAM,GAAG;6EAAC,CAAA,OAAQ,KAAK,EAAE;;YAC5C,QAAQ,GAAG,CAAC,iBAAiB;YAC7B,eAAe,IAAI,IAAI;YAEvB,+CAA+C;YAC/C;kEAAS,CAAA,eAAgB;2BAAI;qBAAa;;YAE1C,6BAA6B;YAC7B;kEAAW;oBACT,eAAe,IAAI;oBACnB,QAAQ,GAAG,CAAC;gBACd;iEAAG;QACL;yDAAG;QAAC;QAAO;KAAS;IAEpB,4CAA4C;IAC5C,MAAM,cAAc,IAAA,4KAAW;wDAAC,CAAC;gBAElB;YADb,iDAAiD;YACjD,MAAM,QAAO,4BAAA,iBAAiB,OAAO,cAAxB,gDAAA,0BAA0B,qBAAqB;YAC5D,IAAI,MAAM;gBACR,MAAM,YAAY,MAAM,OAAO,GAAG,KAAK,IAAI,IAAI,MAAM,OAAO,GAAG,KAAK,KAAK,IACxD,MAAM,OAAO,GAAG,KAAK,GAAG,IAAI,MAAM,OAAO,GAAG,KAAK,MAAM;gBACxE,IAAI,WAAW;oBACb,kBAAkB;gBACpB;YACF;QACF;uDAAG,EAAE;IAEL,MAAM,mBAAmB,IAAA,4KAAW;6DAAC,CAAC,QAAgB;YACpD;qEAAS,CAAC,MACR,IAAI,GAAG;6EAAC,CAAC;4BACP,IAAI,KAAK,EAAE,KAAK,QAAQ;gCACtB,OAAO;oCAAE,GAAG,IAAI;oCAAE,MAAM;wCAAE,GAAG,KAAK,IAAI;wCAAE,GAAG,IAAI;oCAAC;gCAAE;4BACpD;4BACA,OAAO;wBACT;;;QAEJ;4DAAG,EAAE;IAEL,yDAAyD;IACzD,MAAM,qBAAqB,IAAA,4KAAW;+DAAC,CAAC;YACtC,MAAM,kBAAsE,EAAE;YAE9E,oDAAoD;YACpD,MAAM,gBAAgB,MAAM,MAAM;qFAAC,CAAA,OAAQ,KAAK,MAAM,KAAK;;YAE3D,cAAc,OAAO;uEAAC,CAAA;oBACpB,MAAM,aAAa,MAAM,IAAI;0FAAC,CAAA,OAAQ,KAAK,EAAE,KAAK,KAAK,MAAM;;oBAC7D,IAAI,YAAY;wBACd,gBAAgB,IAAI,CAAC;4BACnB,QAAQ,WAAW,EAAE;4BACrB,MAAM,WAAW,IAAI;4BACrB,MAAM,WAAW,IAAI,IAAI;wBAC3B;oBACF;gBACF;;YAEA,OAAO;QACT;8DAAG;QAAC;QAAO;KAAM;IAEjB,+DAA+D;IAC/D,MAAM,kBAAkB,IAAA,4KAAW;4DAAC,eAAO;gBAAgB,2EAAe,CAAC;YACzE,MAAM,kBAAkB,mBAAmB;YAE3C,QAAQ,GAAG,CAAC,oCAAoC;YAChD,QAAQ,GAAG,CAAC,qBAAqB;YAEjC,wCAAwC;YACxC,IAAI,kBAAkB;YACtB,IAAI,eAAe;YAEnB,gBAAgB,OAAO;oEAAC,CAAA;oBACtB,QAAQ,GAAG,CAAC,qBAAqB,MAAM,IAAI,EAAE,MAAM,IAAI;oBAEvD,OAAQ,MAAM,IAAI;wBAChB,KAAK;4BACH,IAAI,MAAM,IAAI,CAAC,KAAK,EAAE;gCACpB,mBAAmB,AAAC,eAA+B,OAAjB,MAAM,IAAI,CAAC,KAAK,EAAC;4BACrD;4BACA;wBACF,KAAK;4BACH,IAAI,MAAM,IAAI,CAAC,QAAQ,EAAE;gCACvB,eAAe,MAAM,IAAI,CAAC,QAAQ;gCAClC,mBAAoB;gCACpB,QAAQ,GAAG,CAAC,sBAAsB,MAAM,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,MAAM;4BAC3E;4BACA;wBACF,KAAK;4BACH,IAAI,MAAM,IAAI,CAAC,UAAU,EAAE;gCACzB,mBAAmB,AAAC,mBAAwC,OAAtB,MAAM,IAAI,CAAC,UAAU,EAAC;4BAC9D;4BACA;wBACF,KAAK;4BACH,IAAI,MAAM,IAAI,CAAC,QAAQ,EAAE;gCACvB,mBAAmB,AAAC,gBAAmC,OAApB,MAAM,IAAI,CAAC,QAAQ,EAAC;4BACzD;4BACA;wBACF,KAAK;4BACH,IAAI,MAAM,IAAI,CAAC,QAAQ,EAAE;gCACvB,eAAe,MAAM,IAAI,CAAC,QAAQ;gCAClC,mBAAoB;gCACpB,IAAI,MAAM,IAAI,CAAC,aAAa,EAAE;oCAC5B,mBAAmB,AAAC,oBAA4C,OAAzB,MAAM,IAAI,CAAC,aAAa,EAAC;gCAClE;4BACF;4BACA;oBACJ;gBACF;;YAEA,QAAQ,GAAG,CAAC,yBAAyB;YACrC,QAAQ,GAAG,CAAC,0BAA0B,eAAe,kBAAkB;YAEvE,OAAO;gBACL,aAAa,gBAAgB,IAAI;gBACjC,cAAc;gBACd,iBAAiB;YACnB;QACF;2DAAG;QAAC;KAAmB;IAEvB,kDAAkD;IAClD,MAAM,mBAAmB,IAAA,4KAAW;6DAAC,SAAC;gBAAgB,4EAAmB;YACvE,wCAAwC;YACxC,MAAM,kBAAkB,MACrB,MAAM;qFAAC,CAAA,OAAQ,KAAK,MAAM,KAAK;oFAC/B,GAAG;qFAAC,CAAA,OAAQ,KAAK,EAAE;;YAEtB,qBAAqB;YACrB;qEAAe,CAAA;oBACb,MAAM,SAAS,IAAI,IAAI;oBACvB,gBAAgB,OAAO;6EAAC,CAAA,KAAM,OAAO,GAAG,CAAC;;oBACzC,OAAO;gBACT;;YAEA,4BAA4B;YAC5B;qEAAW;oBACT;6EAAe,CAAA;4BACb,MAAM,SAAS,IAAI,IAAI;4BACvB,gBAAgB,OAAO;qFAAC,CAAA,KAAM,OAAO,MAAM,CAAC;;4BAC5C,OAAO;wBACT;;gBACF;oEAAG;QACL;4DAAG;QAAC;KAAM;IAEN,2DAA2D;IAC/D,MAAM,gBAAgB,MAAM,GAAG,CAAC,CAAA,OAAQ,CAAC;YACvC,GAAG,IAAI;YACP,MAAM;gBACJ,GAAG,KAAK,IAAI;gBACZ,UAAU,YAAY,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC;gBACvC,YAAY;YACd;YACA,qDAAqD;YACrD,MAAM,iBAAiB,YAAY;YACnC,UAAU,CAAC;YACX,OAAO;gBACL,aAAa;gBACb,YAAY,iBAAiB,SAAS;YACxC;QACF,CAAC;IAED,6DAA6D;IAC7D,MAAM,gBAAgB,MAAM,GAAG,CAAC,CAAA,OAAQ,CAAC;YACvC,GAAG,IAAI;YACP,MAAM;gBACJ,GAAG,KAAK,IAAI;gBACZ,QAAQ,KAAK,EAAE;gBACf;gBACA,cAAc,CAAC,OAAc,iBAAiB,KAAK,EAAE,EAAE;gBACvD,kBAAkB,IAAM,iBAAiB,KAAK,EAAE;YAClD;QACF,CAAC;IAED,qBACE,6LAAC;QAAI,WAAU;QAAgB,KAAK;;0BAElC,6LAAC;gBAAI,WAAU;0BACb,cAAA,6LAAC;oBACC,SAAS;oBACT,WAAU;;sCAEV,6LAAC;sCAAK;;;;;;sCACN,6LAAC;sCAAK;;;;;;;;;;;;;;;;;YAKT,gCACC,6LAAC;gBAAI,WAAU;0BACb,cAAA,6LAAC;oBAAI,WAAU;8BACb,cAAA,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAI,WAAU;0CAAgB;;;;;;0CAC/B,6LAAC;gCAAI,WAAU;0CAA8B;;;;;;0CAC7C,6LAAC;gCAAI,WAAU;0CAAwB;;;;;;;;;;;;;;;;;;;;;;0BAM/C,6LAAC,kNAAS;gBACR,OAAO;gBACP,OAAO;gBACP,eAAe;gBACf,eAAe;gBACf,WAAW;gBACX,iBAAiB,IAAM,kBAAkB;gBACzC,gBAAgB,IAAM,kBAAkB;gBACxC,oBAAoB;oBAClB,MAAM;oBACN,UAAU,CAAC;gBACb;gBACA,QAAQ;gBACR,QAAQ;gBACR,YAAY;gBACZ,aAAa;gBACb,aAAa;gBACb,WAAW;gBACX,WAAW;gBACX,mBAAmB;gBACnB,iBAAiB;oBAAE,GAAG;oBAAG,GAAG;oBAAG,MAAM;gBAAI;gBACzC,SAAS;gBACT,SAAS;gBACT,iBAAiB;oBAAC;wBAAC,CAAC;wBAAM,CAAC;qBAAK;oBAAE;wBAAC;wBAAM;qBAAK;iBAAC;gBAC/C,YAAY;oBAAC;wBAAC,CAAC;wBAAM,CAAC;qBAAK;oBAAE;wBAAC;wBAAM;qBAAK;iBAAC;gBAC1C,WAAW,AAAC,eAA+C,OAAjC,iBAAiB,aAAa;gBACxD,YAAY;oBAAE,iBAAiB;gBAAK;;kCAEpC,6LAAC,+KAAQ;wBAAC,WAAU;;;;;;kCACpB,6LAAC,mLAAU;wBAAC,OAAM;wBAAU,KAAK;wBAAI,MAAM;;;;;;kCAC3C,6LAAC,oJAAW;;;;;;;;;;;YAIb,6BACC,6LAAC;gBACC,GAAG,YAAY,CAAC;gBAChB,GAAG,YAAY,CAAC;gBAChB,cAAc;gBACd,SAAS;;;;;;;;;;;;AAKnB;IApkBS;MAAA;AAskBM,SAAS;IACtB,qBACE,6LAAC,oLAAiB;kBAChB,cAAA,6LAAC;;;;;;;;;;AAGP;MANwB","debugId":null}}]
}