{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/oliver.ree/Developer/Personal/Daisy/daisy-platform/src/app/api/dalle/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport OpenAI from 'openai';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { prompt, size = '1024x1024', quality = 'standard', style = 'vivid' } = await request.json();\n\n    // Get API key from Authorization header\n    const authHeader = request.headers.get('authorization');\n    const apiKey = authHeader?.replace('Bearer ', '');\n\n    if (!apiKey) {\n      return NextResponse.json(\n        { error: 'OpenAI API key not provided. Please configure your API key in Settings.' },\n        { status: 401 }\n      );\n    }\n\n    if (!prompt) {\n      return NextResponse.json(\n        { error: 'Prompt is required for image generation' },\n        { status: 400 }\n      );\n    }\n\n    // Initialize OpenAI client with the provided API key\n    const openai = new OpenAI({\n      apiKey: apiKey,\n    });\n\n    const response = await openai.images.generate({\n      model: 'dall-e-3',\n      prompt: prompt,\n      size: size as '1024x1024' | '1792x1024' | '1024x1792',\n      quality: quality as 'standard' | 'hd',\n      style: style as 'vivid' | 'natural',\n      n: 1,\n    });\n\n    const imageUrl = response.data[0]?.url;\n\n    if (!imageUrl) {\n      return NextResponse.json(\n        { error: 'No image was generated' },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json({\n      success: true,\n      imageUrl: imageUrl,\n      revisedPrompt: response.data[0]?.revised_prompt,\n    });\n\n  } catch (error: any) {\n    console.error('DALL-E API Error:', error);\n    \n    if (error.code === 'insufficient_quota') {\n      return NextResponse.json(\n        { error: 'OpenAI API quota exceeded. Please check your billing.' },\n        { status: 402 }\n      );\n    }\n    \n    if (error.code === 'invalid_api_key') {\n      return NextResponse.json(\n        { error: 'Invalid OpenAI API key.' },\n        { status: 401 }\n      );\n    }\n\n    if (error.message?.includes('content_policy_violation')) {\n      return NextResponse.json(\n        { error: 'The prompt violates OpenAI content policy. Please modify your request.' },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { error: error.message || 'Failed to generate image' },\n      { status: 500 }\n    );\n  }\n}\n\n// Handle OPTIONS request for CORS\nexport async function OPTIONS() {\n  return new NextResponse(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'POST, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    },\n  });\n}\n"],"names":[],"mappings":";;;;;;AAAA;AACA;AAAA;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAE,MAAM,EAAE,OAAO,WAAW,EAAE,UAAU,UAAU,EAAE,QAAQ,OAAO,EAAE,GAAG,MAAM,QAAQ,IAAI;QAEhG,wCAAwC;QACxC,MAAM,aAAa,QAAQ,OAAO,CAAC,GAAG,CAAC;QACvC,MAAM,SAAS,YAAY,QAAQ,WAAW;QAE9C,IAAI,CAAC,QAAQ;YACX,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA0E,GACnF;gBAAE,QAAQ;YAAI;QAElB;QAEA,IAAI,CAAC,QAAQ;YACX,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA0C,GACnD;gBAAE,QAAQ;YAAI;QAElB;QAEA,qDAAqD;QACrD,MAAM,SAAS,IAAI,mLAAM,CAAC;YACxB,QAAQ;QACV;QAEA,MAAM,WAAW,MAAM,OAAO,MAAM,CAAC,QAAQ,CAAC;YAC5C,OAAO;YACP,QAAQ;YACR,MAAM;YACN,SAAS;YACT,OAAO;YACP,GAAG;QACL;QAEA,MAAM,WAAW,SAAS,IAAI,CAAC,EAAE,EAAE;QAEnC,IAAI,CAAC,UAAU;YACb,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAyB,GAClC;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,UAAU;YACV,eAAe,SAAS,IAAI,CAAC,EAAE,EAAE;QACnC;IAEF,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,qBAAqB;QAEnC,IAAI,MAAM,IAAI,KAAK,sBAAsB;YACvC,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAwD,GACjE;gBAAE,QAAQ;YAAI;QAElB;QAEA,IAAI,MAAM,IAAI,KAAK,mBAAmB;YACpC,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA0B,GACnC;gBAAE,QAAQ;YAAI;QAElB;QAEA,IAAI,MAAM,OAAO,EAAE,SAAS,6BAA6B;YACvD,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAyE,GAClF;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO,MAAM,OAAO,IAAI;QAA2B,GACrD;YAAE,QAAQ;QAAI;IAElB;AACF;AAGO,eAAe;IACpB,OAAO,IAAI,gJAAY,CAAC,MAAM;QAC5B,QAAQ;QACR,SAAS;YACP,+BAA+B;YAC/B,gCAAgC;YAChC,gCAAgC;QAClC;IACF;AACF","debugId":null}}]
}